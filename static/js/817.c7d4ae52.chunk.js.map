{"version":3,"file":"static/js/817.c7d4ae52.chunk.js","mappings":"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","sources":["../../../v3d-web/src/helper/basis.ts","../../../v3d-web/src/helper/filter.ts","../../../v3d-web/src/helper/landmark.ts","../../../v3d-web/src/helper/quaternion.ts","../../../v3d-web/src/helper/utils.ts","../../../v3d-web/src/worker/pose-processing.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["/*\nCopyright (C) 2022  The v3d Authors.\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, version 3.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n// Calculate 3D rotations\nimport {Nullable, Plane, Quaternion, Vector3} from \"@babylonjs/core\";\nimport {AXIS, vectorsSameDirWithinEps} from \"./quaternion\";\nimport {setEqual, validVector3} from \"./utils\";\n\nexport type Vector33 = [Vector3, Vector3, Vector3];\n\nexport class Basis {\n    private static readonly ORIGINAL_CARTESIAN_BASIS_VECTORS: Vector33 = [\n        new Vector3(1, 0, 0),\n        new Vector3(0, 1, 0),\n        new Vector3(0, 0, 1),\n    ];\n\n    private readonly _data: Vector33 = Basis.getOriginalCoordVectors();\n\n    get x(): Vector3 {\n        return this._data[0];\n    }\n\n    get y(): Vector3 {\n        return this._data[1];\n    }\n\n    get z(): Vector3 {\n        return this._data[2];\n    }\n\n    constructor(\n        v33: Nullable<Vector33>,\n        private readonly leftHanded = true,\n        private eps = 1e-6\n    ) {\n        if (v33 && v33.every((v) => validVector3(v)))\n            this.set(v33);\n        this._data.forEach((v) => {\n            Object.freeze(v);\n        })\n    }\n\n    public get() {\n        return this._data;\n    }\n\n    private set(v33: Vector33) {\n        this.x.copyFrom(v33[0]);\n        this.y.copyFrom(v33[1]);\n        this.z.copyFrom(v33[2]);\n\n        this.verifyBasis();\n    }\n\n    public verifyBasis() {\n        const z = this.leftHanded ? this.z : this.z.negate();\n        if (!vectorsSameDirWithinEps(this.x.cross(this.y), z, this.eps))\n            throw Error(\"Basis is not correct!\");\n    }\n\n    public rotateByQuaternion(q: Quaternion): Basis {\n        const newBasisVectors: Vector33 = [Vector3.Zero(), Vector3.Zero(), Vector3.Zero()];\n        this._data.map((v, i) => {\n            v.rotateByQuaternionToRef(q, newBasisVectors[i]);\n        });\n        return new Basis(newBasisVectors);\n    }\n\n    // Basis validity is not checked!\n    public negateAxes(axis: AXIS) {\n        const x = this.x.clone();\n        const y = this.y.clone();\n        const z = this.z.clone();\n        switch (axis) {\n            case AXIS.x:\n                x.negateInPlace();\n                break;\n            case AXIS.y:\n                y.negateInPlace();\n                break;\n            case AXIS.z:\n                z.negateInPlace();\n                break;\n            case AXIS.xy:\n                x.negateInPlace();\n                y.negateInPlace();\n                break;\n            case AXIS.yz:\n                y.negateInPlace();\n                z.negateInPlace();\n                break;\n            case AXIS.xz:\n                x.negateInPlace();\n                z.negateInPlace();\n                break;\n            case AXIS.xyz:\n                x.negateInPlace();\n                y.negateInPlace();\n                z.negateInPlace();\n                break;\n            default:\n                throw Error(\"Unknown axis!\");\n        }\n\n        return new Basis([x, y, z]);\n    }\n\n    public transpose(order: [number, number, number]) {\n        // Sanity check\n        if (!setEqual<number>(new Set(order), new Set([0, 1, 2]))) {\n            console.error(\"Basis transpose failed: wrong input.\");\n            return this;\n        }\n\n        const data = [this.x.clone(), this.y.clone(), this.z.clone()];\n        const newData = order.map(i => data[i]) as Vector33;\n\n        return new Basis(newData);\n    }\n\n    private static getOriginalCoordVectors(): Vector33 {\n        return Basis.ORIGINAL_CARTESIAN_BASIS_VECTORS.map(v => v.clone()) as Vector33;\n    }\n}\n\nexport function quaternionBetweenBases(\n    basis1: Basis,\n    basis2: Basis,\n    prevQuaternion?: Quaternion\n) {\n    let thisBasis1 = basis1, thisBasis2 = basis2;\n    if (prevQuaternion !== undefined) {\n        const extraQuaternionR = Quaternion.Inverse(prevQuaternion);\n        thisBasis1 = basis1.rotateByQuaternion(extraQuaternionR);\n        thisBasis2 = basis2.rotateByQuaternion(extraQuaternionR);\n    }\n    const rotationBasis1 = Quaternion.RotationQuaternionFromAxis(\n        thisBasis1.x.clone(),\n        thisBasis1.y.clone(),\n        thisBasis1.z.clone());\n    const rotationBasis2 = Quaternion.RotationQuaternionFromAxis(\n        thisBasis2.x.clone(),\n        thisBasis2.y.clone(),\n        thisBasis2.z.clone());\n\n    const quaternion31 = rotationBasis1.clone().normalize();\n    const quaternion31R = Quaternion.Inverse(quaternion31);\n    const quaternion32 = rotationBasis2.clone().normalize();\n    return quaternion32.multiply(quaternion31R);\n}\n\n/*\n * Left handed for BJS.\n * Each object is defined by 3 points.\n * Assume a is origin, b points to +x, abc forms XY plane.\n */\nexport function getBasis(obj: Vector33): Basis {\n    const [a, b, c] = obj;\n    const planeXY = Plane.FromPoints(a, b, c).normalize();\n    const axisX = b.subtract(a).normalize();\n    const axisZ = planeXY.normal;\n    // Project c onto ab\n    const cp = a.add(\n        axisX.scale(Vector3.Dot(c.subtract(a), axisX) / Vector3.Dot(axisX, axisX))\n    );\n    const axisY = c.subtract(cp).normalize();\n    return new Basis([axisX, axisY, axisZ]);\n}\n\n// Project points to an average plane\nexport function calcAvgPlane(pts: Vector3[], normal: Vector3): Vector3[] {\n    if (pts.length === 0) return [Vector3.Zero()];\n    const avgPt = pts.reduce((prev, curr) => {\n        return prev.add(curr);\n    }).scale(1 / pts.length);\n\n    const ret = pts.map((v) => {\n        return v.subtract(normal.scale(Vector3.Dot(normal, v.subtract(avgPt))))\n    });\n\n    return ret;\n}\n","/*\nCopyright (C) 2022  The v3d Authors.\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, version 3.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport { Vector3} from \"@babylonjs/core\";\nimport KalmanFilter from \"kalmanjs\";\n\nexport const VISIBILITY_THRESHOLD: number = 0.6;\n\nexport interface FilterParams {\n    R?: number,\n    Q?: number,\n    oneEuroCutoff?: number,\n    oneEuroBeta?: number,\n    type: string,\n    gaussianSigma?: number,\n}\n\n// 1D Gaussian Kernel\nexport const gaussianKernel1d = (function () {\n    let sqr2pi = Math.sqrt(2 * Math.PI);\n\n    return function gaussianKernel1d (size: number, sigma: number) {\n        // ensure size is even and prepare variables\n        let width = (size / 2) | 0,\n            kernel = new Array(width * 2 + 1),\n            norm = 1.0 / (sqr2pi * sigma),\n            coefficient = 2 * sigma * sigma,\n            total = 0,\n            x;\n\n        // set values and increment total\n        for (x = -width; x <= width; x++) {\n            total += kernel[width + x] = norm * Math.exp(-x * x / coefficient);\n        }\n\n        // divide by total to make sure the sum of all the values is equal to 1\n        for (x = 0; x < kernel.length; x++) {\n            kernel[x] /= total;\n        }\n\n        return kernel;\n    };\n}());\n\n/*\n * Converted from https://github.com/jaantollander/OneEuroFilter.\n */\nexport class OneEuroVectorFilter {\n    constructor(\n        public t_prev: number,\n        public x_prev: Vector3,\n        private dx_prev = Vector3.Zero(),\n        public min_cutoff = 1.0,\n        public beta = 0.0,\n        public d_cutoff = 1.0\n    ) {\n    }\n\n    private static smoothing_factor(t_e: number, cutoff: number) {\n        const r = 2 * Math.PI * cutoff * t_e;\n        return r / (r + 1);\n    }\n\n    private static exponential_smoothing(a: number, x: Vector3, x_prev: Vector3) {\n        return x.scale(a).addInPlace(x_prev.scale((1 - a)));\n    }\n\n    public next(t: number, x: Vector3) {\n        const t_e = t - this.t_prev;\n\n        // The filtered derivative of the signal.\n        const a_d = OneEuroVectorFilter.smoothing_factor(t_e, this.d_cutoff);\n        const dx = x.subtract(this.x_prev).scaleInPlace(1 / t_e);\n        const dx_hat = OneEuroVectorFilter.exponential_smoothing(a_d, dx, this.dx_prev);\n\n        // The filtered signal.\n        const cutoff = this.min_cutoff + this.beta * dx_hat.length();\n        const a = OneEuroVectorFilter.smoothing_factor(t_e, cutoff);\n        const x_hat = OneEuroVectorFilter.exponential_smoothing(a, x, this.x_prev);\n\n        // Memorize the previous values.\n        this.x_prev = x_hat;\n        this.dx_prev = dx_hat;\n        this.t_prev = t;\n\n        return x_hat;\n    }\n}\nexport class KalmanVectorFilter {\n    private readonly kalmanFilterX;\n    private readonly kalmanFilterY;\n    private readonly kalmanFilterZ;\n    constructor(\n        public R = 0.1,\n        public Q = 3,\n    ) {\n        this.kalmanFilterX = new KalmanFilter({Q: Q, R: R});\n        this.kalmanFilterY = new KalmanFilter({Q: Q, R: R});\n        this.kalmanFilterZ = new KalmanFilter({Q: Q, R: R});\n    }\n\n    public next(t: number, vec: Vector3) {\n        const newValues = [\n            this.kalmanFilterX.filter(vec.x),\n            this.kalmanFilterY.filter(vec.y),\n            this.kalmanFilterZ.filter(vec.z),\n        ]\n\n        return Vector3.FromArray(newValues);\n    }\n}\n\nexport class GaussianVectorFilter {\n    private _values: Vector3[] = [];\n    get values(): Vector3[] {\n        return this._values;\n    }\n    private readonly kernel: number[];\n\n    constructor(\n        public readonly size: number,\n        private readonly sigma: number\n    ) {\n        if (size < 2) throw RangeError(\"Filter size too short\");\n        this.size = Math.floor(size);\n        this.kernel = gaussianKernel1d(size, sigma);\n    }\n\n    public push(v: Vector3) {\n        this.values.push(v);\n\n        if (this.values.length === this.size + 1) {\n            this.values.shift();\n        } else if (this.values.length > this.size + 1) {\n            console.warn(`Internal queue has length longer than size: ${this.size}`);\n            this.values.slice(-this.size);\n        }\n    }\n\n    public reset() {\n        this.values.length = 0;\n    }\n\n    public apply() {\n        if (this.values.length !== this.size) return Vector3.Zero();\n        const ret = Vector3.Zero();\n        const len0 = ret.length();\n        for (let i = 0; i < this.size; ++i) {\n            ret.addInPlace(this.values[i].scale(this.kernel[i]));\n        }\n        const len1 = ret.length();\n        // Normalize to original length\n        ret.scaleInPlace(len0 / len1);\n\n        return ret;\n    }\n}\n\nexport class EuclideanHighPassFilter {\n    private _value: Vector3 = Vector3.Zero();\n    get value(): Vector3 {\n        return this._value;\n    }\n\n    constructor(\n        private readonly threshold: number\n    ) {}\n\n    public update(v: Vector3) {\n        if (this.value.subtract(v).length() > this.threshold) {\n            this._value = v;\n        }\n    }\n\n    public reset() {\n        this._value = Vector3.Zero();\n    }\n}\n","/*\nCopyright (C) 2022  The v3d Authors.\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, version 3.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport {NormalizedLandmark, Results} from \"@mediapipe/holistic\";\nimport {Nullable, Vector3} from \"@babylonjs/core\";\nimport {\n    FilterParams,\n    GaussianVectorFilter,\n    KalmanVectorFilter,\n    OneEuroVectorFilter,\n    VISIBILITY_THRESHOLD\n} from \"./filter\";\nimport {objectFlip} from \"./utils\";\n\nexport class FilteredLandmarkVector {\n    private mainFilter: OneEuroVectorFilter | KalmanVectorFilter;\n    private readonly gaussianVectorFilter: Nullable<GaussianVectorFilter> = null;\n\n    private _t = 0;\n    get t(): number {\n        return this._t;\n    }\n\n    set t(value: number) {\n        this._t = value;\n    }\n\n    private _pos = Vector3.Zero();\n    get pos(): Vector3 {\n        return this._pos;\n    }\n\n    public visibility: number | undefined = 0;\n\n    constructor(\n        params: FilterParams = {\n            oneEuroCutoff: 0.01,\n            oneEuroBeta: 0,\n            type: 'OneEuro'\n        }\n    ) {\n        if (params.type === \"Kalman\")\n            this.mainFilter = new KalmanVectorFilter(params.R, params.Q);\n        else if (params.type === \"OneEuro\")\n            this.mainFilter = new OneEuroVectorFilter(\n                this.t,\n                this.pos,\n                Vector3.Zero(),\n                params.oneEuroCutoff,\n                params.oneEuroBeta);\n        else\n            throw Error(\"Wrong filter type!\");\n        if (params.gaussianSigma)\n            this.gaussianVectorFilter = new GaussianVectorFilter(5, params.gaussianSigma);\n    }\n\n    public updatePosition(pos: Vector3, visibility?: number) {\n        this.t += 1;\n\n        // Face Mesh has no visibility\n        if (visibility === undefined || visibility > VISIBILITY_THRESHOLD) {\n            pos = this.mainFilter.next(this.t, pos);\n\n            if (this.gaussianVectorFilter) {\n                this.gaussianVectorFilter.push(pos);\n                pos = this.gaussianVectorFilter.apply();\n            }\n\n            this._pos = pos;\n\n            this.visibility = visibility;\n        }\n    }\n}\n\nexport type FilteredLandmarkVectorList = FilteredLandmarkVector[];\n\nexport type FilteredLandmarkVector3 = [\n    FilteredLandmarkVector,\n    FilteredLandmarkVector,\n    FilteredLandmarkVector,\n];\n\nexport interface CloneableResults extends Omit<Results, 'segmentationMask' | 'image'> {\n}\n\nexport const POSE_LANDMARK_LENGTH = 33;\nexport const FACE_LANDMARK_LENGTH = 478;\nexport const HAND_LANDMARK_LENGTH = 21;\n\nexport const normalizedLandmarkToVector = (\n    l: NormalizedLandmark,\n    scaling = 1.,\n    reverseY = false) => {\n    return new Vector3(\n        l.x * scaling,\n        reverseY ? -l.y * scaling : l.y * scaling,\n        l.z * scaling);\n}\nexport const vectorToNormalizedLandmark = (l: Vector3): NormalizedLandmark => {\n    return {x: l.x, y: l.y, z: l.z};\n};\n\nexport const HAND_LANDMARKS = {\n    WRIST: 0,\n    THUMB_CMC: 1,\n    THUMB_MCP: 2,\n    THUMB_IP: 3,\n    THUMB_TIP: 4,\n    INDEX_FINGER_MCP: 5,\n    INDEX_FINGER_PIP: 6,\n    INDEX_FINGER_DIP: 7,\n    INDEX_FINGER_TIP: 8,\n    MIDDLE_FINGER_MCP: 9,\n    MIDDLE_FINGER_PIP: 10,\n    MIDDLE_FINGER_DIP: 11,\n    MIDDLE_FINGER_TIP: 12,\n    RING_FINGER_MCP: 13,\n    RING_FINGER_PIP: 14,\n    RING_FINGER_DIP: 15,\n    RING_FINGER_TIP: 16,\n    PINKY_MCP: 17,\n    PINKY_PIP: 18,\n    PINKY_DIP: 19,\n    PINKY_TIP: 20,\n};\n\nexport const HAND_LANDMARKS_BONE_MAPPING = {\n    Hand: HAND_LANDMARKS.WRIST,\n    ThumbProximal: HAND_LANDMARKS.THUMB_CMC,\n    ThumbIntermediate: HAND_LANDMARKS.THUMB_MCP,\n    ThumbDistal: HAND_LANDMARKS.THUMB_IP,\n    IndexProximal: HAND_LANDMARKS.INDEX_FINGER_MCP,\n    IndexIntermediate: HAND_LANDMARKS.INDEX_FINGER_PIP,\n    IndexDistal: HAND_LANDMARKS.INDEX_FINGER_DIP,\n    MiddleProximal: HAND_LANDMARKS.MIDDLE_FINGER_MCP,\n    MiddleIntermediate: HAND_LANDMARKS.MIDDLE_FINGER_PIP,\n    MiddleDistal: HAND_LANDMARKS.MIDDLE_FINGER_DIP,\n    RingProximal: HAND_LANDMARKS.RING_FINGER_MCP,\n    RingIntermediate: HAND_LANDMARKS.RING_FINGER_PIP,\n    RingDistal: HAND_LANDMARKS.RING_FINGER_DIP,\n    LittleProximal: HAND_LANDMARKS.PINKY_MCP,\n    LittleIntermediate: HAND_LANDMARKS.PINKY_PIP,\n    LittleDistal: HAND_LANDMARKS.PINKY_DIP,\n};\nexport const HAND_LANDMARKS_BONE_REVERSE_MAPPING: { [key: number]: string } = objectFlip(HAND_LANDMARKS_BONE_MAPPING);\nexport type HandBoneMappingKey = keyof typeof HAND_LANDMARKS_BONE_MAPPING;\n\nexport function handLandMarkToBoneName(landmark: number, isLeft: boolean) {\n    if (!(landmark in HAND_LANDMARKS_BONE_REVERSE_MAPPING)) throw Error(\"Wrong landmark given!\");\n    return (isLeft ? 'left' : 'right') + HAND_LANDMARKS_BONE_REVERSE_MAPPING[landmark];\n}\n\n/*\n * Depth-first search/walk of a generic tree.\n * Also returns a map for backtracking from leaf.\n */\nexport function depthFirstSearch(\n    rootNode: any,\n    f: (n: any) => boolean\n): [any, any] {\n    const stack = [];\n    const parentMap: Map<any, any> = new Map<any, any>();\n    stack.push(rootNode);\n\n    while (stack.length !== 0) {\n        // remove the first child in the stack\n        const currentNode: any = stack.splice(-1, 1)[0];\n        const retVal = f(currentNode);\n        if (retVal) return [currentNode, parentMap];\n\n        const currentChildren = currentNode.children;\n        // add any children in the node at the top of the stack\n        if (currentChildren !== null) {\n            for (let index = 0; index < currentChildren.length; index++) {\n                const child = currentChildren[index];\n                stack.push(child);\n                if (!(parentMap.has(child))) {\n                    parentMap.set(child, currentNode);\n                }\n            }\n        }\n    }\n    return [null, null];\n}\n","/*\nCopyright (C) 2022  The v3d Authors.\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, version 3.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport {Nullable, Quaternion, Angle, Vector3, Plane} from \"@babylonjs/core\";\nimport {rangeCap} from \"./utils\";\nimport {Basis, quaternionBetweenBases} from \"./basis\";\nimport {vectorToNormalizedLandmark} from \"./landmark\";\nimport {\n    FilterParams,\n    GaussianVectorFilter,\n    KalmanVectorFilter,\n} from \"./filter\";\n\nexport class CloneableQuaternionLite {\n    public x: number = 0;\n    public y: number = 0;\n    public z: number = 0;\n    public w: number = 1;\n\n    constructor(\n        q: Nullable<Quaternion>,\n    ) {\n        if (q) {\n            this.x = q.x;\n            this.y = q.y;\n            this.z = q.z;\n            this.w = q.w;\n        }\n    }\n}\n\nexport class CloneableQuaternion extends CloneableQuaternionLite {\n    private readonly _baseBasis: Basis;\n    get baseBasis(): Basis {\n        return this._baseBasis;\n    }\n\n    constructor(\n        q: Nullable<Quaternion>,\n        basis?: Basis\n    ) {\n        super(q);\n        this._baseBasis = basis ? basis : new Basis(null);\n    }\n\n    public set(q: Quaternion) {\n        this.x = q.x;\n        this.y = q.y;\n        this.z = q.z;\n        this.w = q.w;\n    }\n\n    public rotateBasis(q: Quaternion): Basis {\n        return this._baseBasis.rotateByQuaternion(q);\n    }\n}\n\nexport interface CloneableQuaternionMap {\n    [key: string]: CloneableQuaternion\n}\n\nexport type CloneableQuaternionList = CloneableQuaternion[];\nexport const cloneableQuaternionToQuaternion = (q: CloneableQuaternionLite): Quaternion => {\n    const ret = new Quaternion(q.x, q.y, q.z, q.w);\n    return ret;\n};\n\nexport class FilteredQuaternion {\n    private mainFilter: KalmanVectorFilter;\n    private readonly gaussianVectorFilter: Nullable<GaussianVectorFilter> = null;\n\n    private _t = 0;\n    get t(): number {\n        return this._t;\n    }\n    set t(value: number) {\n        this._t = value;\n    }\n\n    private _rot = Quaternion.Identity();\n    get rot(): Quaternion {\n        return this._rot;\n    }\n\n    constructor(\n        params: FilterParams = {\n            R: 1,\n            Q: 1,\n            type: 'Kalman'\n        }\n    ) {\n        if (params.type === \"Kalman\")\n            this.mainFilter = new KalmanVectorFilter(params.R, params.Q);\n        else\n            throw Error(\"Wrong filter type!\");\n        if (params.gaussianSigma)\n            this.gaussianVectorFilter = new GaussianVectorFilter(5, params.gaussianSigma);\n    }\n\n    public updateRotation(rot: Quaternion) {\n        this.t += 1;\n        let angles = rot.toEulerAngles();\n        angles = this.mainFilter.next(this.t, angles);\n\n        if (this.gaussianVectorFilter) {\n            this.gaussianVectorFilter.push(angles);\n            angles = this.gaussianVectorFilter.apply();\n        }\n\n        this._rot = Quaternion.FromEulerVector(angles);\n    }\n}\n\nexport type FilteredQuaternionList = FilteredQuaternion[];\n\n\nexport enum AXIS {\n    x,\n    y,\n    z,\n    xy,\n    yz,\n    xz,\n    xyz,\n    none = 10\n}\n\n// Convenience functions\nexport const RadToDeg = (r: number) => {\n    return Angle.FromRadians(r).degrees();\n}\nexport const DegToRad = (d: number) => {\n    return Angle.FromDegrees(d).radians();\n}\n\n/**\n * Check a quaternion is valid\n * @param q Input quaternion\n */\nexport function checkQuaternion(q: Quaternion) {\n    return Number.isFinite(q.x) && Number.isFinite(q.y) && Number.isFinite(q.z) && Number.isFinite(q.w);\n}\n\n// Similar to three.js Quaternion.setFromUnitVectors\nexport const quaternionBetweenVectors = (\n    v1: Vector3, v2: Vector3,\n): Quaternion => {\n    const angle = Vector3.GetAngleBetweenVectors(v1, v2, Vector3.Cross(v1, v2))\n    const axis = Vector3.Cross(v1, v2);\n    axis.normalize();\n    return Quaternion.RotationAxis(axis, angle);\n};\n/**\n * Same as above, Euler angle version\n * @param v1 Input rotation in degrees 1\n * @param v2 Input rotation in degrees 2\n * @param remapDegree Whether re-map degrees\n */\nexport const degreeBetweenVectors = (\n    v1: Vector3, v2: Vector3, remapDegree = false\n) => {\n    return quaternionToDegrees(quaternionBetweenVectors(v1, v2), remapDegree);\n};\n/**\n * Re-map degrees to -180 to 180\n * @param deg Input angle in Degrees\n */\nexport const remapDegreeWithCap = (deg: number) => {\n    deg = rangeCap(deg, 0, 360);\n    return deg < 180 ? deg : deg - 360;\n}\n/**\n * Convert quaternions to degrees\n * @param q Input quaternion\n * @param remapDegree whether re-map degrees\n */\nexport const quaternionToDegrees = (\n    q: Quaternion,\n    remapDegree = false,\n) => {\n    const angles = q.toEulerAngles();\n    const remapFn = remapDegree ? remapDegreeWithCap : (x: number) => x;\n    return new Vector3(\n        remapFn(RadToDeg(angles.x)),\n        remapFn(RadToDeg(angles.y)),\n        remapFn(RadToDeg(angles.z)),\n    );\n};\n\n/**\n * Check whether two directions are close enough within a small values\n * @param v1 Input direction 1\n * @param v2 Input direction 2\n * @param eps Error threshold\n */\nexport function vectorsSameDirWithinEps(v1: Vector3, v2: Vector3, eps = 1e-6) {\n    return v1.cross(v2).length() < eps && Vector3.Dot(v1, v2) > 0;\n}\n\n/**\n * Test whether two quaternions have equal effects\n * @param q1 Input quaternion 1\n * @param q2 Input quaternion 2\n */\nexport function testQuaternionEqualsByVector(q1: Quaternion, q2: Quaternion) {\n    const testVec = Vector3.One();\n    const testVec1 = Vector3.Zero();\n    const testVec2 = Vector3.One();\n    testVec.rotateByQuaternionToRef(q1, testVec1);\n    testVec.rotateByQuaternionToRef(q2, testVec2);\n    return vectorsSameDirWithinEps(testVec1, testVec2);\n}\n\n/**\n * Same as above, Euler angle version\n * @param d1 Input degrees 1\n * @param d2 Input degrees 2\n */\nexport function degreesEqualInQuaternion(\n    d1: Vector3, d2: Vector3\n) {\n    const q1 = Quaternion.FromEulerAngles(DegToRad(d1.x), DegToRad(d1.y), DegToRad(d1.z));\n    const q2 = Quaternion.FromEulerAngles(DegToRad(d2.x), DegToRad(d2.y), DegToRad(d2.z));\n    return testQuaternionEqualsByVector(q1, q2);\n}\n\n/**\n * Reverse rotation Euler angles on given axes\n * @param q Input quaternion\n * @param axis Axes to reverse\n */\nexport const reverseRotation = (q: Quaternion, axis: AXIS) => {\n    if (axis === AXIS.none) return q;\n    const angles = q.toEulerAngles();\n    switch (axis) {\n        case AXIS.x:\n            angles.x = -angles.x;\n            break;\n        case AXIS.y:\n            angles.y = -angles.y;\n            break;\n        case AXIS.z:\n            angles.z = -angles.z;\n            break;\n        case AXIS.xy:\n            angles.x = -angles.x;\n            angles.y = -angles.y;\n            break;\n        case AXIS.yz:\n            angles.y = -angles.y;\n            angles.z = -angles.z;\n            break;\n        case AXIS.xz:\n            angles.x = -angles.x;\n            angles.z = -angles.z;\n            break;\n        case AXIS.xyz:\n            angles.x = -angles.x;\n            angles.y = -angles.y;\n            angles.z = -angles.z;\n            break;\n        default:\n            throw Error(\"Unknown axis!\");\n    }\n    return Quaternion.RotationYawPitchRoll(angles.y, angles.x, angles.z);\n}\n/**\n * Remove rotation on given axes.\n * Optionally capping rotation (in Euler angles) on two axes.\n * This operation assumes re-mapped degrees.\n * @param q Input quaternion\n * @param axis Axes to remove\n * @param capAxis1 Capping axis 1\n * @param capLow1 Axis 1 lower range\n * @param capHigh1 Axis 1 higher range\n * @param capAxis2 Capping axis 2\n * @param capLow2 Axis 2 lower range\n * @param capHigh2 Axis 2 higher range\n */\nexport const removeRotationAxisWithCap = (\n    q: Quaternion,\n    axis: AXIS,\n    capAxis1?: AXIS,\n    capLow1?: number,\n    capHigh1?: number,\n    capAxis2?: AXIS,\n    capLow2?: number,\n    capHigh2?: number,\n) => {\n    const angles = quaternionToDegrees(q, true);\n    switch (axis) {\n        case AXIS.none:\n            break;\n        case AXIS.x:\n            angles.x = 0;\n            break;\n        case AXIS.y:\n            angles.y = 0;\n            break;\n        case AXIS.z:\n            angles.z = 0;\n            break;\n        case AXIS.xy:\n            angles.x = 0;\n            angles.y = 0;\n            break;\n        case AXIS.yz:\n            angles.y = 0;\n            angles.z = 0;\n            break;\n        case AXIS.xz:\n            angles.x = 0;\n            angles.z = 0;\n            break;\n        case AXIS.xyz:\n            angles.x = 0;\n            angles.y = 0;\n            angles.z = 0;\n            break;\n        default:\n            throw Error(\"Unknown axis!\");\n    }\n    if (capAxis1 !== undefined && capLow1 !== undefined && capHigh1 !== undefined) {\n        switch (capAxis1 as AXIS) {\n            case AXIS.x:\n                angles.x = rangeCap(angles.x, capLow1, capHigh1);\n                break;\n            case AXIS.y:\n                angles.y = rangeCap(angles.y, capLow1, capHigh1);\n                break;\n            case AXIS.z:\n                angles.z = rangeCap(angles.z, capLow1, capHigh1);\n                break;\n            default:\n                throw Error(\"Unknown cap axis!\");\n        }\n    }\n    if (capAxis2 !== undefined && capLow2 !== undefined && capHigh2 !== undefined) {\n        switch (capAxis2 as AXIS) {\n            case AXIS.x:\n                angles.x = rangeCap(angles.x, capLow2, capHigh2);\n                break;\n            case AXIS.y:\n                angles.y = rangeCap(angles.y, capLow2, capHigh2);\n                break;\n            case AXIS.z:\n                angles.z = rangeCap(angles.z, capLow2, capHigh2);\n                break;\n            default:\n                throw Error(\"Unknown cap axis!\");\n        }\n    }\n    return Quaternion.RotationYawPitchRoll(\n        DegToRad(angles.y),\n        DegToRad(angles.x),\n        DegToRad(angles.z));\n}\n/**\n * Switch rotation axes.\n * @param q Input quaternion\n * @param axis1 Axis 1 to switch\n * @param axis2 Axis 2 to switch\n */\nexport const exchangeRotationAxis = (\n    q: Quaternion,\n    axis1: AXIS,\n    axis2: AXIS,\n) => {\n    const angles: number[] = [];\n    q.toEulerAngles().toArray(angles);\n    const angle1 = angles[axis1];\n    const angle2 = angles[axis2];\n    const temp = angle1;\n    angles[axis1] = angle2;\n    angles[axis2] = temp;\n    return Quaternion.FromEulerAngles(\n        angles[0],\n        angles[1],\n        angles[2]);\n}\n\nexport function printQuaternion(q: Quaternion, s?: string) {\n    console.log(s, vectorToNormalizedLandmark(quaternionToDegrees(q, true)));\n}\n\n\n/**\n * Result is in Radian on unit sphere (r = 1).\n * Canonical ISO 80000-2:2019 convention.\n * @param pos Euclidean local position\n * @param basis Local coordinate system basis\n */\nexport function calcSphericalCoord(\n    pos: Vector3, basis: Basis,\n) {\n    const qToOriginal = Quaternion.Inverse(Quaternion.RotationQuaternionFromAxis(\n        basis.x.clone(), basis.y.clone(), basis.z.clone())).normalize();\n    const posInOriginal = Vector3.Zero();\n    pos.rotateByQuaternionToRef(qToOriginal, posInOriginal);\n    posInOriginal.normalize();\n\n    // Calculate theta and phi\n    const x = posInOriginal.x;\n    const y = posInOriginal.y;\n    const z = posInOriginal.z;\n\n    const theta = Math.acos(z);\n    const phi = Math.atan2(y, x);\n\n    return [theta, phi];\n}\n\n/**\n * Assuming rotation starts from (1, 0, 0) in local coordinate system.\n * @param basis Local coordinate system basis\n * @param theta Polar angle\n * @param phi Azimuthal angle\n * @param prevQuaternion Parent quaternion to the local system\n */\nexport function sphericalToQuaternion(\n    basis: Basis, theta: number, phi: number,\n    prevQuaternion: Quaternion) {\n    const xTz = Quaternion.RotationAxis(basis.y.clone(), -Math.PI / 2);\n    const xTzBasis = basis.rotateByQuaternion(xTz);\n    const q1 = Quaternion.RotationAxis(xTzBasis.x.clone(), phi);\n    const q1Basis = xTzBasis.rotateByQuaternion(q1);\n    const q2 = Quaternion.RotationAxis(q1Basis.y.clone(), theta);\n    const q2Basis = q1Basis.rotateByQuaternion(q2);\n\n    // Force result to face front\n    const planeXZ = Plane.FromPositionAndNormal(Vector3.Zero(), basis.y.clone());\n    // const intermBasis = basis.rotateByQuaternion(xTz.multiply(q1).multiplyInPlace(q2));\n    const intermBasis = q2Basis;\n    const newBasisZ = Vector3.Cross(intermBasis.x.clone(), planeXZ.normal);\n    const newBasisY = Vector3.Cross(newBasisZ, intermBasis.x.clone());\n    const newBasis = new Basis([intermBasis.x, newBasisY, newBasisZ]);\n\n    return quaternionBetweenBases(basis, newBasis, prevQuaternion);\n}\n\n// Scale rotation angles in place\nexport function scaleRotation(quaternion: Quaternion, scale: number) {\n    const angles = quaternion.toEulerAngles();\n    angles.scaleInPlace(scale);\n    return Quaternion.FromEulerVector(angles);\n}\n","/*\nCopyright (C) 2021  The v3d Authors.\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, version 3.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport {Plane, Vector3, Curve3, ILoadingScreen} from \"@babylonjs/core\";\n\nexport function initArray<T>(length: number, initializer: (i: number) => T) {\n    let arr = new Array<T>(length);\n    for (let i = 0; i < length; i++)\n        arr[i] = initializer(i);\n    return arr;\n}\n\nexport function range(start: number, end: number, step: number) {\n    return Array.from(\n        {length: Math.ceil((end - start) / step)},\n        (_, i) => start + i * step\n    );\n}\n\nexport function linspace(start: number, end: number, div: number) {\n    const step = (end - start) / div;\n    return Array.from(\n        {length: div},\n        (_, i) => start + i * step\n    );\n}\n\nexport function objectFlip(obj: any) {\n    const ret: any = {};\n    Object.keys(obj).forEach((key: any) => {\n        ret[obj[key]] = key;\n    });\n    return ret;\n}\n\nexport const rangeCap = (\n    v: number,\n    min: number,\n    max: number\n) => {\n    if (min > max) {\n        const tmp = max;\n        max = min;\n        min = tmp;\n    }\n    return Math.max(Math.min(v, max), min);\n}\nexport const remapRange = (\n    v: number,\n    src_low: number,\n    src_high: number,\n    dst_low: number,\n    dst_high: number\n) => {\n    return dst_low + (v - src_low) * (dst_high - dst_low) / (src_high - src_low);\n};\nexport const remapRangeWithCap = (\n    v: number,\n    src_low: number,\n    src_high: number,\n    dst_low: number,\n    dst_high: number\n) => {\n    const v1 = rangeCap(v, src_low, src_high);\n    return dst_low + (v1 - src_low) * (dst_high - dst_low) / (src_high - src_low);\n};\nexport const remapRangeNoCap = (\n    v: number,\n    src_low: number,\n    src_high: number,\n    dst_low: number,\n    dst_high: number\n) => {\n    return dst_low + (v - src_low) * (dst_high - dst_low) / (src_high - src_low);\n};\nexport function validVector3(v: Vector3) {\n    return Number.isFinite(v.x) && Number.isFinite(v.y) && Number.isFinite(v.z);\n}\n\nexport type KeysMatching<T, V> = { [K in keyof T]-?: T[K] extends V ? K : never }[keyof T];\n\n// type MethodKeysOfA = KeysMatching<A, Function>;\n\nexport type IfEquals<X, Y, A = X, B = never> =\n    (<T>() => T extends X ? 1 : 2) extends (<T>() => T extends Y ? 1 : 2) ? A : B;\nexport type ReadonlyKeys<T> = {\n    [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, never, P>\n}[keyof T];\n\n// type ReadonlyKeysOfA = ReadonlyKeys<A>;\n\nexport function setEqual<T>(as: Set<T>, bs: Set<T>) {\n    if (as.size !== bs.size) return false;\n    for (const a of as) if (!bs.has(a)) return false;\n    return true;\n}\n\nexport function projectVectorOnPlane(projPlane: Plane, vec: Vector3) {\n    return vec.subtract(projPlane.normal.scale(Vector3.Dot(vec, projPlane.normal)));\n}\n\nexport function round(value: number, precision: number) {\n    const multiplier = Math.pow(10, precision || 0);\n    return Math.round(value * multiplier) / multiplier;\n}\n\n/**\n * Simple fixed length FIFO queue.\n */\nexport class fixedLengthQueue<T> {\n    private _values: T[] = [];\n    get values(): T[] {\n        return this._values;\n    }\n\n    constructor(public readonly size: number) {\n    }\n\n    public push(v: T) {\n        this.values.push(v);\n\n        if (this.values.length === this.size + 1) {\n            this.values.shift();\n        } else if (this.values.length > this.size + 1) {\n            console.warn(`Internal queue has length longer than size ${this.size}: Got length ${this.values.length}`);\n            this._values = this.values.slice(-this.size);\n        }\n    }\n\n    public concat(arr: T[]) {\n        this._values = this.values.concat(arr);\n\n        if (this.values.length > this.size) {\n            this._values = this.values.slice(-this.size);\n        }\n    }\n\n    public pop() {\n        return this.values.shift();\n    }\n\n    public first() {\n        if (this._values.length > 0)\n            return this.values[0];\n        else\n            return null;\n    }\n\n    public last() {\n        if (this._values.length > 0)\n            return this._values[this._values.length - 1];\n        else\n            return null;\n    }\n\n    public reset() {\n        this.values.length = 0;\n    }\n\n    public length() {\n        return this.values.length;\n    }\n}\n\nexport function findPoint(curve: Curve3, x: number, eps = 0.001) {\n    const pts = curve.getPoints();\n    if (x > pts[0].x) return pts[0].y;\n    else if (x < pts[pts.length - 1].x) return pts[pts.length - 1].y;\n    for (let i = 0; i < pts.length; ++i) {\n        if (Math.abs(x - pts[i].x) < eps) return pts[i].y;\n    }\n    return 0;\n}\n\nexport const LR = [\"left\", \"right\"];\n\nexport class CustomLoadingScreen implements ILoadingScreen {\n    //optional, but needed due to interface definitions\n    public loadingUIBackgroundColor: string = '';\n    public loadingUIText: string = '';\n\n    constructor(\n        private readonly renderingCanvas: HTMLCanvasElement,\n        private loadingDiv: HTMLDivElement\n    ) {}\n\n    public displayLoadingUI() {\n        if (!this.loadingDiv) return;\n        if (this.loadingDiv.style.display === 'none') {\n            // Do not add a loading screen if there is already one\n            this.loadingDiv.style.display = \"initial\";\n        }\n\n        // this._resizeLoadingUI();\n        // window.addEventListener(\"resize\", this._resizeLoadingUI);\n    }\n\n    public hideLoadingUI() {\n        if (this.loadingDiv)\n            this.loadingDiv.style.display = \"none\";\n    }\n\n    // private _resizeLoadingUI = () => {\n    //     const canvasRect = this.renderingCanvas.getBoundingClientRect();\n    //     const canvasPositioning = window.getComputedStyle(this.renderingCanvas).position;\n    //\n    //     if (!this._loadingDiv) {\n    //         return;\n    //     }\n    //\n    //     this._loadingDiv.style.position = (canvasPositioning === \"fixed\") ? \"fixed\" : \"absolute\";\n    //     this._loadingDiv.style.left = canvasRect.left + \"px\";\n    //     this._loadingDiv.style.top = canvasRect.top + \"px\";\n    //     this._loadingDiv.style.width = canvasRect.width + \"px\";\n    //     this._loadingDiv.style.height = canvasRect.height + \"px\";\n    // }\n}\n\nexport function pointLineDistance(\n    point: Vector3,\n    lineEndA: Vector3, lineEndB: Vector3\n) {\n    const lineDir = lineEndB.subtract(lineEndA).normalize();\n    const pProj = lineEndA.add(\n        lineDir.scale(\n            Vector3.Dot(point.subtract(lineEndA), lineDir)\n            / Vector3.Dot(lineDir, lineDir)));\n    return point.subtract(pProj).length();\n}\n","/*\nCopyright (C) 2021  The v3d Authors.\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, version 3.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nimport * as Comlink from \"comlink\"\nimport {\n    FACEMESH_FACE_OVAL,\n    FACEMESH_LEFT_EYE,\n    FACEMESH_LEFT_EYEBROW,\n    FACEMESH_LEFT_IRIS,\n    FACEMESH_LIPS,\n    FACEMESH_RIGHT_EYE,\n    FACEMESH_RIGHT_EYEBROW,\n    FACEMESH_RIGHT_IRIS,\n    NormalizedLandmark,\n    NormalizedLandmarkList,\n    POSE_LANDMARKS,\n    POSE_LANDMARKS_LEFT,\n    POSE_LANDMARKS_RIGHT,\n} from \"@mediapipe/holistic\";\nimport {Nullable, Plane, Quaternion, Vector3} from \"@babylonjs/core\";\nimport {\n    fixedLengthQueue,\n    initArray,\n    KeysMatching, LR, pointLineDistance,\n    projectVectorOnPlane,\n    ReadonlyKeys, remapRange, remapRangeNoCap,\n    remapRangeWithCap,\n} from \"../helper/utils\";\nimport {TransformNodeTreeNode} from \"v3d-core/dist/src/importer/babylon-vrm-loader/src\";\nimport {\n    CloneableResults,\n    depthFirstSearch,\n    FACE_LANDMARK_LENGTH,\n    FilteredLandmarkVector,\n    FilteredLandmarkVector3,\n    FilteredLandmarkVectorList,\n    HAND_LANDMARK_LENGTH,\n    HAND_LANDMARKS,\n    HAND_LANDMARKS_BONE_MAPPING,\n    handLandMarkToBoneName,\n    normalizedLandmarkToVector,\n    POSE_LANDMARK_LENGTH,\n    vectorToNormalizedLandmark\n} from \"../helper/landmark\";\nimport {\n    AXIS,\n    calcSphericalCoord,\n    CloneableQuaternion,\n    CloneableQuaternionMap,\n    cloneableQuaternionToQuaternion,\n    degreeBetweenVectors, FilteredQuaternion,\n    removeRotationAxisWithCap,\n    reverseRotation, scaleRotation,\n    sphericalToQuaternion\n} from \"../helper/quaternion\";\nimport {Basis, calcAvgPlane, getBasis, quaternionBetweenBases} from \"../helper/basis\";\nimport {VISIBILITY_THRESHOLD} from \"../helper/filter\";\nimport {BoneOptions} from \"../v3d-web\";\nimport {HumanoidBone} from \"v3d-core/dist/src/importer/babylon-vrm-loader/src/humanoid-bone\";\n\n\nexport class PoseKeyPoints {\n    public top_face_oval = new FilteredLandmarkVector();\n    public left_face_oval = new FilteredLandmarkVector();\n    public bottom_face_oval = new FilteredLandmarkVector();\n    public right_face_oval = new FilteredLandmarkVector();\n    public left_eye_top = new FilteredLandmarkVector();\n    public left_eye_bottom = new FilteredLandmarkVector();\n    public left_eye_inner = new FilteredLandmarkVector();\n    public left_eye_outer = new FilteredLandmarkVector();\n    public left_eye_inner_secondary = new FilteredLandmarkVector();\n    public left_eye_outer_secondary = new FilteredLandmarkVector();\n    public left_iris_top = new FilteredLandmarkVector();\n    public left_iris_bottom = new FilteredLandmarkVector();\n    public left_iris_left = new FilteredLandmarkVector();\n    public left_iris_right = new FilteredLandmarkVector();\n    public right_eye_top = new FilteredLandmarkVector();\n    public right_eye_bottom = new FilteredLandmarkVector();\n    public right_eye_inner = new FilteredLandmarkVector();\n    public right_eye_outer = new FilteredLandmarkVector();\n    public right_eye_inner_secondary = new FilteredLandmarkVector();\n    public right_eye_outer_secondary = new FilteredLandmarkVector();\n    public right_iris_top = new FilteredLandmarkVector();\n    public right_iris_bottom = new FilteredLandmarkVector();\n    public right_iris_left = new FilteredLandmarkVector();\n    public right_iris_right = new FilteredLandmarkVector();\n    public mouth_top_first = new FilteredLandmarkVector();\n    public mouth_top_second = new FilteredLandmarkVector();\n    public mouth_top_third = new FilteredLandmarkVector();\n    public mouth_bottom_first = new FilteredLandmarkVector();\n    public mouth_bottom_second = new FilteredLandmarkVector();\n    public mouth_bottom_third = new FilteredLandmarkVector();\n    public mouth_left = new FilteredLandmarkVector();\n    public mouth_right = new FilteredLandmarkVector();\n}\n\nexport type PosesKey = keyof Omit<Poses, KeysMatching<Poses, Function> | ReadonlyKeys<Poses>>;\n\nexport class Poses {\n    public static readonly FACE_MESH_CONNECTIONS = [\n        FACEMESH_LEFT_EYEBROW, FACEMESH_RIGHT_EYEBROW,\n        FACEMESH_LEFT_EYE, FACEMESH_RIGHT_EYE,\n        FACEMESH_LEFT_IRIS, FACEMESH_RIGHT_IRIS,\n        FACEMESH_LIPS, FACEMESH_FACE_OVAL\n    ];\n    public static readonly HAND_BASE_ROOT_NORMAL = new Vector3(0, -1, 0);\n\n    private static readonly HAND_POSITION_SCALING = 0.8;\n\n    /* Remap offsets to quaternions using arbitrary range.\n     * IRIS_MP=MediaPipe Iris\n     * IRIS_BJS=BabylonJS RotationYawPitchRoll\n     */\n    private static readonly IRIS_MP_X_RANGE = 0.027;\n    private static readonly IRIS_MP_Y_RANGE = 0.011;\n    private static readonly IRIS_BJS_X_RANGE = 0.28;\n    private static readonly IRIS_BJS_Y_RANGE = 0.12;\n\n    private static readonly BLINK_RATIO_LOW = 0.59;\n    private static readonly BLINK_RATIO_HIGH = 0.61;\n    private static readonly MOUTH_MP_RANGE_LOW = 0.001;\n    private static readonly MOUTH_MP_RANGE_HIGH = 0.06;\n\n    private static readonly EYE_WIDTH_BASELINE = 0.0546;\n    private static readonly MOUTH_WIDTH_BASELINE = 0.095;\n    private static readonly LR_FACE_DIRECTION_RANGE = 27;\n\n    // General\n    private _boneOptions: BoneOptions;\n    // Workaround for Promise problem\n    public updateBoneOptions(value: BoneOptions) {\n        this._boneOptions = value;\n    }\n    private readonly _boneRotationUpdateFn: Nullable<((data: Uint8Array) => void) & Comlink.ProxyMarked> = null;\n\n    // VRMManager\n    private bonesHierarchyTree: Nullable<TransformNodeTreeNode> = null;\n\n    // Results\n    public cloneableInputResults: Nullable<CloneableResults> = null;\n\n    // Pose Landmarks\n    public inputPoseLandmarks: NormalizedLandmarkList = initArray<NormalizedLandmark>(\n        POSE_LANDMARK_LENGTH, () => {\n            return {x: 0, y: 0, z: 0};\n        });\n    private poseLandmarks: FilteredLandmarkVectorList = initArray<FilteredLandmarkVector>(\n        POSE_LANDMARK_LENGTH, () => {\n            return new FilteredLandmarkVector({\n                R: 0.1, Q: 5, type: 'Kalman',\n            });\n        });\n    private worldPoseLandmarks: FilteredLandmarkVectorList = initArray<FilteredLandmarkVector>(\n        POSE_LANDMARK_LENGTH, () => {\n            return new FilteredLandmarkVector({\n                // R: 0.1, Q: 0.1, type: 'Kalman',\n                R: 0.1, Q: 1, type: 'Kalman',\n            });  // 0.01, 0.6, 0.007\n        });\n    // Cannot use Vector3 directly since postMessage() erases all methods\n    public cloneablePoseLandmarks: NormalizedLandmarkList = initArray<NormalizedLandmark>(\n        POSE_LANDMARK_LENGTH, () => {\n            return {x: 0, y: 0, z: 0};\n        });\n\n    // Face Mesh Landmarks\n    public inputFaceLandmarks: NormalizedLandmarkList = initArray<NormalizedLandmark>(\n        FACE_LANDMARK_LENGTH, () => {\n            return {x: 0, y: 0, z: 0};\n        });\n    private faceLandmarks: FilteredLandmarkVectorList = initArray<FilteredLandmarkVector>(\n        FACE_LANDMARK_LENGTH, () => {\n            return new FilteredLandmarkVector({\n                // oneEuroCutoff: 0.01, oneEuroBeta: 15, type: 'OneEuro',\n                R: 0.1, Q: 1, type: 'Kalman'\n            });     // 0.01, 15, 0.002\n        });\n    private _faceMeshLandmarkIndexList: number[][] = [];\n    get faceMeshLandmarkIndexList(): number[][] {\n        return this._faceMeshLandmarkIndexList;\n    }\n\n    private _faceMeshLandmarkList: NormalizedLandmarkList[] = [];\n    get faceMeshLandmarkList(): NormalizedLandmarkList[] {\n        return this._faceMeshLandmarkList;\n    }\n\n    // Left Hand Landmarks\n    private leftWristOffset: FilteredLandmarkVector =\n        new FilteredLandmarkVector({\n            R: 0.1, Q: 2, type: 'Kalman',\n        });    // 0.01, 2, 0.008\n    public inputLeftHandLandmarks: NormalizedLandmarkList = initArray<NormalizedLandmark>(\n        HAND_LANDMARK_LENGTH, () => {\n            return {x: 0, y: 0, z: 0};\n        });\n    private leftHandLandmarks: FilteredLandmarkVectorList = initArray<FilteredLandmarkVector>(\n        HAND_LANDMARK_LENGTH, () => {\n            return new FilteredLandmarkVector({\n                R: 1, Q: 10, type: 'Kalman',\n            });    // 0.001, 0.6\n\n        });\n    public cloneableLeftHandLandmarks: NormalizedLandmarkList = initArray<NormalizedLandmark>(\n        HAND_LANDMARK_LENGTH, () => {\n            return {x: 0, y: 0, z: 0};\n        });\n    private leftHandNormal: Vector3 = Vector3.Zero();\n\n    // Right Hand Landmarks\n    private rightWristOffset: FilteredLandmarkVector =\n        new FilteredLandmarkVector({\n            R: 0.1, Q: 2, type: 'Kalman',\n        });    // 0.01, 2, 0.008\n    public inputRightHandLandmarks: NormalizedLandmarkList = initArray<NormalizedLandmark>(\n        HAND_LANDMARK_LENGTH, () => {\n            return {x: 0, y: 0, z: 0};\n        });\n    private rightHandLandmarks: FilteredLandmarkVectorList = initArray<FilteredLandmarkVector>(\n        HAND_LANDMARK_LENGTH, () => {\n            return new FilteredLandmarkVector({\n                R: 1, Q: 10, type: 'Kalman',\n            });    // 0.001, 0.6\n        });\n    public cloneableRightHandLandmarks: NormalizedLandmarkList = initArray<NormalizedLandmark>(\n        HAND_LANDMARK_LENGTH, () => {\n            return {x: 0, y: 0, z: 0};\n        });\n    private rightHandNormal: Vector3 = Vector3.Zero();\n\n    // Feet\n    private leftFootNormal: Vector3 = Vector3.Zero();\n    private rightFootNormal: Vector3 = Vector3.Zero();\n    private leftFootBasisRotation: Quaternion = Quaternion.Identity();\n    private rightFootBasisRotation: Quaternion = Quaternion.Identity();\n\n    // Key points\n    private _keyPoints: PoseKeyPoints = new PoseKeyPoints();\n    get keyPoints(): PoseKeyPoints {\n        return this._keyPoints;\n    }\n    private _blinkBase: FilteredLandmarkVector = new FilteredLandmarkVector({\n        R: 1, Q: 1, type: 'Kalman',\n    });\n    private _leftBlinkArr: fixedLengthQueue<number> = new fixedLengthQueue<number>(10);\n    private _rightBlinkArr: fixedLengthQueue<number> = new fixedLengthQueue<number>(10);\n\n    // Calculated properties\n    private _faceNormal: NormalizedLandmark = {x: 0, y: 0, z: 0};\n    get faceNormal(): NormalizedLandmark {\n        return this._faceNormal;\n    }\n    private _headQuaternion: FilteredQuaternion = new FilteredQuaternion({\n        R: 1, Q: 50, type: 'Kalman',\n    });\n\n    // TODO: option: lock x rotation\n\n    // A copy for restore bone locations\n    private _initBoneRotations: CloneableQuaternionMap = {};\n    // Calculated bone rotations\n    private _boneRotations: CloneableQuaternionMap = {};\n    private textEncoder = new TextEncoder();\n\n    private _leftHandNormals: NormalizedLandmarkList = initArray<NormalizedLandmark>(\n        3, () => {\n            return {x: 0, y: 0, z: 0};\n        });\n    get leftHandNormals(): NormalizedLandmarkList {\n        return this._leftHandNormals;\n    }\n\n    private _rightHandNormals: NormalizedLandmarkList = initArray<NormalizedLandmark>(\n        3, () => {\n            return {x: 0, y: 0, z: 0};\n        });\n    get rightHandNormals(): NormalizedLandmarkList {\n        return this._rightHandNormals;\n    }\n\n    private _poseNormals: NormalizedLandmarkList = initArray<NormalizedLandmark>(\n        3, // Arbitrary length for debugging\n        () => {\n            return {x: 0, y: 0, z: 0};\n        });\n    get poseNormals(): NormalizedLandmarkList {\n        return this._poseNormals;\n    }\n\n    public midHipPos: Nullable<NormalizedLandmark> = null;\n    public midHipInitOffset: Nullable<NormalizedLandmark> = null;\n    public midHipOffset = new FilteredLandmarkVector({\n        R: 1, Q: 10, type: 'Kalman',\n    });\n\n    constructor(\n        boneOptions: BoneOptions,\n        boneRotationUpdateFn?: ((data: Uint8Array) => void) & Comlink.ProxyMarked\n    ) {\n        this.initBoneRotations();    //provisional\n        this._boneOptions = boneOptions;\n        if (boneRotationUpdateFn) this._boneRotationUpdateFn = boneRotationUpdateFn;\n    }\n\n    /**\n     * One time operation to set bones hierarchy from VRMManager\n     * @param tree root node of tree\n     */\n    public setBonesHierarchyTree(tree: TransformNodeTreeNode, forceReplace = false) {\n        // Assume bones have unique names\n        if (this.bonesHierarchyTree && !forceReplace) return;\n\n        this.bonesHierarchyTree = tree;\n\n        // Re-init bone rotations\n        this._initBoneRotations = {};\n        depthFirstSearch(this.bonesHierarchyTree, (n: TransformNodeTreeNode) => {\n            this._initBoneRotations[n.name] = new CloneableQuaternion(\n                Quaternion.Identity());\n            return false;\n        });\n        this.initBoneRotations();\n    }\n\n    /**\n     * All MediaPipe inputs have the following conventions:\n     *  - Left-right mirrored (selfie mode)\n     *  - Face towards -Z (towards camera) by default\n     *  TODO: interpolate results to 60 FPS.\n     * @param results Result object from MediaPipe Holistic\n     */\n    public process(\n        results: CloneableResults\n    ) {\n        this.cloneableInputResults = results;\n        if (!this.cloneableInputResults) return;\n\n        if (this._boneOptions.resetInvisible) {\n            this.resetBoneRotations();\n        }\n\n        this.preProcessResults();\n\n        // Actual processing\n        // Post filtered landmarks\n        this.toCloneableLandmarks(this.poseLandmarks, this.cloneablePoseLandmarks);\n        this.filterFaceLandmarks();\n        this.toCloneableLandmarks(this.leftHandLandmarks, this.cloneableLeftHandLandmarks);\n        this.toCloneableLandmarks(this.rightHandLandmarks, this.cloneableRightHandLandmarks);\n\n        // Gather key points\n        this.getKeyPoints();\n\n        // Bone Orientations Independent\n        // Calculate iris orientations\n        this.calcIrisNormal();\n\n        // Bone Orientations Dependent\n        // Calculate face orientation\n        this.calcFaceBones();\n\n        // Calculate expressions\n        this.calcExpressions();\n\n        // Calculate full body bones\n        this.calcPoseBones();\n\n        // Calculate hand bones\n        this.calcHandBones();\n\n        // Post processing\n        if (this._boneOptions.irisLockX) {\n            this._boneRotations['iris'].set(removeRotationAxisWithCap(\n                cloneableQuaternionToQuaternion(this._boneRotations['iris']),\n                AXIS.x));\n            this._boneRotations['leftIris'].set(removeRotationAxisWithCap(\n                cloneableQuaternionToQuaternion(this._boneRotations['iris']),\n                AXIS.x));\n            this._boneRotations['rightIris'].set(removeRotationAxisWithCap(\n                cloneableQuaternionToQuaternion(this._boneRotations['iris']),\n                AXIS.x));\n        }\n\n        const lockBones: string[] = [];\n        // Holistic doesn't reset hand landmarks when invisible\n        // So we infer invisibility from wrist landmark\n        if (this._boneOptions.resetInvisible) {\n            if ((this.cloneableInputResults?.poseLandmarks[POSE_LANDMARKS.LEFT_WRIST].visibility || 0) < VISIBILITY_THRESHOLD) {\n                for (const k of Object.keys(HAND_LANDMARKS_BONE_MAPPING)) {\n                    const key = `left${k}`;\n                    lockBones.push(key);\n                }\n            }\n            if ((this.cloneableInputResults?.poseLandmarks[POSE_LANDMARKS.RIGHT_WRIST].visibility || 0) < VISIBILITY_THRESHOLD) {\n                for (const k of Object.keys(HAND_LANDMARKS_BONE_MAPPING)) {\n                    const key = `right${k}`;\n                    lockBones.push(key);\n                }\n            }\n        }\n        if (this._boneOptions.lockFinger) {\n            for (const d of LR) {\n                for (const k of Object.keys(HAND_LANDMARKS_BONE_MAPPING)) {\n                    const key = d + k;\n                    lockBones.push(key);\n                }\n            }\n        }\n        if (this._boneOptions.lockArm) {\n            for (const k of LR) {\n                lockBones.push(`${k}UpperArm`);\n                lockBones.push(`${k}LowerArm`);\n            }\n        }\n        if (this._boneOptions.lockLeg) {\n            for (const k of LR) {\n                lockBones.push(`${k}UpperLeg`);\n                lockBones.push(`${k}LowerLeg`);\n                lockBones.push(`${k}Foot`);\n            }\n        }\n        this.filterBoneRotations(lockBones);\n\n        // Push to main\n        this.pushBoneRotationBuffer();\n    }\n\n    public resetBoneRotations(sendResult = false) {\n        for (const [k, v] of Object.entries(this._initBoneRotations)) {\n            this._boneRotations[k].set(cloneableQuaternionToQuaternion(v));\n        }\n        if (sendResult) {\n            this.pushBoneRotationBuffer();\n        }\n    }\n\n    private filterBoneRotations(boneNames: string[]) {\n        for (const k of boneNames) {\n            if (this._boneRotations[k]) {\n                this._boneRotations[k].set(Quaternion.Identity());\n            }\n        }\n    }\n\n    private getKeyPoints() {\n        // Get points from face mesh\n        this._keyPoints.top_face_oval = this.faceLandmarks[this.faceMeshLandmarkIndexList[7][0]];\n        this._keyPoints.left_face_oval = this.faceLandmarks[this.faceMeshLandmarkIndexList[7][6]];\n        this._keyPoints.bottom_face_oval = this.faceLandmarks[this.faceMeshLandmarkIndexList[7][18]];\n        this._keyPoints.right_face_oval = this.faceLandmarks[this.faceMeshLandmarkIndexList[7][30]];\n\n        this._keyPoints.left_eye_inner = this.faceLandmarks[this.faceMeshLandmarkIndexList[2][8]];\n        this._keyPoints.right_eye_inner = this.faceLandmarks[this.faceMeshLandmarkIndexList[3][8]];\n        this._keyPoints.left_eye_outer = this.faceLandmarks[this.faceMeshLandmarkIndexList[2][0]];\n        this._keyPoints.right_eye_outer = this.faceLandmarks[this.faceMeshLandmarkIndexList[3][0]];\n\n        this._keyPoints.mouth_left = this.faceLandmarks[this.faceMeshLandmarkIndexList[6][10]];\n        this._keyPoints.mouth_right = this.faceLandmarks[this.faceMeshLandmarkIndexList[6][0]];\n        this._keyPoints.mouth_top_first = this.faceLandmarks[this.faceMeshLandmarkIndexList[6][24]];\n        this._keyPoints.mouth_top_second = this.faceLandmarks[this.faceMeshLandmarkIndexList[6][25]];\n        this._keyPoints.mouth_top_third = this.faceLandmarks[this.faceMeshLandmarkIndexList[6][26]];\n        this._keyPoints.mouth_bottom_first = this.faceLandmarks[this.faceMeshLandmarkIndexList[6][34]];\n        this._keyPoints.mouth_bottom_second = this.faceLandmarks[this.faceMeshLandmarkIndexList[6][35]];\n        this._keyPoints.mouth_bottom_third = this.faceLandmarks[this.faceMeshLandmarkIndexList[6][36]];\n\n        this._keyPoints.left_iris_top = this.faceLandmarks[this.faceMeshLandmarkIndexList[4][1]];\n        this._keyPoints.left_iris_bottom = this.faceLandmarks[this.faceMeshLandmarkIndexList[4][3]];\n        this._keyPoints.left_iris_left = this.faceLandmarks[this.faceMeshLandmarkIndexList[4][2]];\n        this._keyPoints.left_iris_right = this.faceLandmarks[this.faceMeshLandmarkIndexList[4][0]];\n        this._keyPoints.right_iris_top = this.faceLandmarks[this.faceMeshLandmarkIndexList[5][1]];\n        this._keyPoints.right_iris_bottom = this.faceLandmarks[this.faceMeshLandmarkIndexList[5][3]];\n        this._keyPoints.right_iris_left = this.faceLandmarks[this.faceMeshLandmarkIndexList[5][2]];\n        this._keyPoints.right_iris_right = this.faceLandmarks[this.faceMeshLandmarkIndexList[5][0]];\n\n        this._keyPoints.left_eye_top = this.faceLandmarks[this.faceMeshLandmarkIndexList[2][12]];\n        this._keyPoints.left_eye_bottom = this.faceLandmarks[this.faceMeshLandmarkIndexList[2][4]];\n        this._keyPoints.left_eye_inner_secondary = this.faceLandmarks[this.faceMeshLandmarkIndexList[2][14]];\n        this._keyPoints.left_eye_outer_secondary = this.faceLandmarks[this.faceMeshLandmarkIndexList[2][10]];\n        this._keyPoints.right_eye_top = this.faceLandmarks[this.faceMeshLandmarkIndexList[3][12]];\n        this._keyPoints.right_eye_bottom = this.faceLandmarks[this.faceMeshLandmarkIndexList[3][4]];\n        this._keyPoints.right_eye_outer_secondary = this.faceLandmarks[this.faceMeshLandmarkIndexList[3][10]];\n        this._keyPoints.right_eye_inner_secondary = this.faceLandmarks[this.faceMeshLandmarkIndexList[3][14]];\n    }\n\n    /*\n     * Calculate the face orientation from landmarks.\n     * Landmarks from Face Mesh takes precedence.\n     */\n    private calcFaceBones() {\n        const axisX = this._keyPoints.left_face_oval.pos.subtract(this._keyPoints.right_face_oval.pos).normalize();\n        const axisY = this._keyPoints.top_face_oval.pos.subtract(this._keyPoints.bottom_face_oval.pos).normalize();\n        if (axisX.length() === 0 || axisY.length() === 0) return;\n        const thisBasis = new Basis([\n            axisX, axisY, Vector3.Cross(axisX, axisY)\n        ]);\n\n        // Distribute rotation between neck and head\n        const headParentQuaternion = this.applyQuaternionChain('head', false);\n        const headBasis = this._boneRotations['head'].rotateBasis(\n            headParentQuaternion);\n        const quaternion = reverseRotation(quaternionBetweenBases(\n            thisBasis, headBasis, headParentQuaternion), AXIS.x);\n        this._headQuaternion.updateRotation(quaternion);\n        const scaledQuaternion = scaleRotation(this._headQuaternion.rot, 0.5);\n        this._boneRotations['head'].set(scaledQuaternion);\n        this._boneRotations['neck'].set(scaledQuaternion);\n    }\n\n    /*\n     * Remap positional offsets to rotations.\n     * Iris only have positional offsets. Their normals always face front.\n     */\n    private calcIrisNormal() {\n        if (!this.cloneableInputResults?.faceLandmarks) return;\n\n        const leftIrisCenter = this._keyPoints.left_iris_top.pos\n            .add(this._keyPoints.left_iris_bottom.pos)\n            .add(this._keyPoints.left_iris_left.pos)\n            .add(this._keyPoints.left_iris_right.pos)\n            .scale(0.5);\n        const rightIrisCenter = this._keyPoints.right_iris_top.pos\n            .add(this._keyPoints.right_iris_bottom.pos)\n            .add(this._keyPoints.right_iris_left.pos)\n            .add(this._keyPoints.right_iris_right.pos)\n            .scale(0.5);\n\n        // Calculate eye center\n        const leftEyeCenter = this._keyPoints.left_eye_top.pos\n            .add(this._keyPoints.left_eye_bottom.pos)\n            .add(this._keyPoints.left_eye_inner_secondary.pos)\n            .add(this._keyPoints.left_eye_outer_secondary.pos)\n            .scale(0.5);\n        const rightEyeCenter = this._keyPoints.right_eye_top.pos\n            .add(this._keyPoints.right_eye_bottom.pos)\n            .add(this._keyPoints.right_eye_outer_secondary.pos)\n            .add(this._keyPoints.right_eye_inner_secondary.pos)\n            .scale(0.5);\n\n        // Calculate offsets\n        const leftEyeWidth = this._keyPoints.left_eye_inner.pos.subtract(this._keyPoints.left_eye_outer.pos).length();\n        const rightEyeWidth = this._keyPoints.right_eye_inner.pos.subtract(this._keyPoints.right_eye_outer.pos).length();\n\n        const leftIrisOffset = leftIrisCenter\n            .subtract(leftEyeCenter)\n            .scale(Poses.EYE_WIDTH_BASELINE / leftEyeWidth);\n        const rightIrisOffset = rightIrisCenter\n            .subtract(rightEyeCenter)\n            .scale(Poses.EYE_WIDTH_BASELINE / rightEyeWidth);\n\n        // Remap offsets to quaternions\n        const leftIrisRotationYPR = Quaternion.RotationYawPitchRoll(\n            remapRangeWithCap(leftIrisOffset.x, -Poses.IRIS_MP_X_RANGE, Poses.IRIS_MP_X_RANGE,\n                -Poses.IRIS_BJS_X_RANGE, Poses.IRIS_BJS_X_RANGE),\n            remapRangeWithCap(leftIrisOffset.y, -Poses.IRIS_MP_Y_RANGE, Poses.IRIS_MP_Y_RANGE,\n                -Poses.IRIS_BJS_Y_RANGE, Poses.IRIS_BJS_Y_RANGE),\n            0\n        );\n        const rightIrisRotationYPR = Quaternion.RotationYawPitchRoll(\n            remapRangeWithCap(rightIrisOffset.x, -Poses.IRIS_MP_X_RANGE, Poses.IRIS_MP_X_RANGE,\n                -Poses.IRIS_BJS_X_RANGE, Poses.IRIS_BJS_X_RANGE),\n            remapRangeWithCap(rightIrisOffset.y, -Poses.IRIS_MP_Y_RANGE, Poses.IRIS_MP_Y_RANGE,\n                -Poses.IRIS_BJS_Y_RANGE, Poses.IRIS_BJS_Y_RANGE),\n            0\n        );\n\n        this._boneRotations['leftIris'].set(leftIrisRotationYPR);\n        this._boneRotations['rightIris'].set(rightIrisRotationYPR);\n        this._boneRotations['iris'].set(this.lRLinkQuaternion(\n            leftIrisRotationYPR, rightIrisRotationYPR));\n    }\n\n    private calcExpressions() {\n        if (!this.cloneableInputResults?.faceLandmarks) return;\n\n        const leftTopToMiddle = pointLineDistance(this._keyPoints.left_eye_top.pos,\n            this._keyPoints.left_eye_inner.pos, this._keyPoints.left_eye_outer.pos);\n        const leftTopToBottom = this._keyPoints.left_eye_top.pos\n            .subtract(this._keyPoints.left_eye_bottom.pos).length();\n        const rightTopToMiddle = pointLineDistance(this._keyPoints.right_eye_top.pos,\n            this._keyPoints.right_eye_inner.pos, this._keyPoints.right_eye_outer.pos);\n        const rightTopToBottom = this._keyPoints.right_eye_top.pos\n            .subtract(this._keyPoints.right_eye_bottom.pos).length();\n\n        this._blinkBase.updatePosition(new Vector3(\n            Math.log(leftTopToMiddle / leftTopToBottom + 1),\n            Math.log(rightTopToMiddle / rightTopToBottom + 1),\n            0));\n        let leftRangeOffset = 0;\n        if (this._leftBlinkArr.length() > 4) {\n            leftRangeOffset = this._leftBlinkArr.values.reduce(\n                (p, c, i) => p + (c - p) / (i + 1), 0) - Poses.BLINK_RATIO_LOW;\n        }\n        const leftBlink = remapRangeNoCap(\n            this._blinkBase.pos.x,\n            Poses.BLINK_RATIO_LOW + leftRangeOffset,\n            Poses.BLINK_RATIO_HIGH + leftRangeOffset,\n            0, 1\n        );\n        this._leftBlinkArr.push(this._blinkBase.pos.x);\n\n        let rightRangeOffset = 0;\n        if (this._rightBlinkArr.length() > 4) {\n            rightRangeOffset = this._rightBlinkArr.values.reduce(\n                (p, c, i) => p + (c - p) / (i + 1), 0) - Poses.BLINK_RATIO_LOW;\n        }\n        const rightBlink = remapRangeNoCap(\n            this._blinkBase.pos.y,\n            Poses.BLINK_RATIO_LOW + rightRangeOffset,\n            Poses.BLINK_RATIO_HIGH + rightRangeOffset,\n            0, 1\n        );\n        this._rightBlinkArr.push(this._blinkBase.pos.y);\n\n        const blink = this.lRLink(leftBlink, rightBlink);\n\n        this._boneRotations['blink'].set(new Quaternion(\n            leftBlink, rightBlink, blink, 0));\n\n        const mouthWidth = this._keyPoints.mouth_left.pos.subtract(this._keyPoints.mouth_right.pos).length();\n        const mouthRange1 = remapRangeWithCap(\n            this._keyPoints.mouth_top_first.pos.subtract(this._keyPoints.mouth_bottom_first.pos)\n                .length() * Poses.MOUTH_WIDTH_BASELINE / mouthWidth,\n            Poses.MOUTH_MP_RANGE_LOW, Poses.MOUTH_MP_RANGE_HIGH,\n            0, 1\n        );\n        const mouthRange2 = remapRangeWithCap(\n            this._keyPoints.mouth_top_second.pos.subtract(this._keyPoints.mouth_bottom_second.pos)\n                .length() * Poses.MOUTH_WIDTH_BASELINE / mouthWidth,\n            Poses.MOUTH_MP_RANGE_LOW, Poses.MOUTH_MP_RANGE_HIGH,\n            0, 1\n        );\n        const mouthRange3 = remapRangeWithCap(\n            this._keyPoints.mouth_top_third.pos.subtract(this._keyPoints.mouth_bottom_third.pos)\n                .length() * Poses.MOUTH_WIDTH_BASELINE / mouthWidth,\n            Poses.MOUTH_MP_RANGE_LOW, Poses.MOUTH_MP_RANGE_HIGH,\n            0, 1\n        );\n        this._boneRotations['mouth'].set(new Quaternion(\n            (mouthRange1 + mouthRange2 + mouthRange3) / 3, 0, 0, 0));\n    }\n\n    private calcPoseBones() {\n        // Do not calculate pose if no visible face. It can lead to wierd poses.\n        if (!this.cloneableInputResults?.poseLandmarks) return;\n        // Use hips as the starting point. Rotation of hips is always on XZ plane.\n        // Upper chest is not used.\n        // TODO derive neck and chest from spine and head.\n\n        const leftHip = this.worldPoseLandmarks[POSE_LANDMARKS.LEFT_HIP].pos;\n        const rightHip = this.worldPoseLandmarks[POSE_LANDMARKS.RIGHT_HIP].pos;\n        const leftShoulder = this.worldPoseLandmarks[POSE_LANDMARKS.LEFT_SHOULDER].pos;\n        const rightShoulder = this.worldPoseLandmarks[POSE_LANDMARKS.RIGHT_SHOULDER].pos;\n\n        this.poseNormals.length = 0;\n\n        // Hips\n        const worldXZPlane = Plane.FromPositionAndNormal(Vector3.Zero(), new Vector3(0, 1, 0));\n        const hipLine = leftHip.subtract(rightHip);\n        const hipLineProj = projectVectorOnPlane(worldXZPlane, hipLine);\n        const hipRotationAngle = Math.atan2(hipLineProj.z, hipLineProj.x);\n        this._boneRotations['hips'].set(Quaternion.FromEulerAngles(\n            0, hipRotationAngle, 0));\n\n        // Chest/Shoulder\n        const shoulderNormR = Plane.FromPoints(rightShoulder, leftShoulder, rightHip).normal;\n        const shoulderNormL = Plane.FromPoints(rightShoulder, leftShoulder, leftHip).normal;\n        const shoulderNormal = shoulderNormL.add(shoulderNormR).normalize();\n\n        // Spine\n        if (shoulderNormal.length() > 0.1) {\n            const spineParentQuaternion = this.applyQuaternionChain('spine', false);\n            const spineBasis = this._boneRotations['spine'].rotateBasis(\n                spineParentQuaternion);\n            const newSpineBasisY = rightShoulder.subtract(leftShoulder).normalize();\n            const newSpineBasis = new Basis([\n                shoulderNormal,\n                newSpineBasisY,\n                Vector3.Cross(shoulderNormal, newSpineBasisY),\n            ]);\n\n            this._boneRotations['spine'].set(reverseRotation(quaternionBetweenBases(\n                spineBasis, newSpineBasis, spineParentQuaternion), AXIS.yz));\n        }\n\n        this.calcWristBones();\n\n        // Arms\n        let theta = 0, phi = 0;\n        for (const k of LR) {\n            const isLeft = k === \"left\";\n            if (!this.shallUpdateArm(isLeft)) continue;\n\n            const upperArmKey = `${k}UpperArm`;\n            const shoulderLandmark = this.worldPoseLandmarks[POSE_LANDMARKS[`${k.toUpperCase()}_SHOULDER` as keyof typeof POSE_LANDMARKS]].pos;\n            const elbowLandmark = this.worldPoseLandmarks[POSE_LANDMARKS[`${k.toUpperCase()}_ELBOW` as keyof typeof POSE_LANDMARKS]].pos;\n            const wristLandmark = this.worldPoseLandmarks[POSE_LANDMARKS[`${k.toUpperCase()}_WRIST` as keyof typeof POSE_LANDMARKS]].pos;\n\n            const upperArmDir = elbowLandmark.subtract(shoulderLandmark).normalize();\n            const upperArmParentQuaternion = this.applyQuaternionChain(upperArmKey, false);\n            const upperArmBasis = this._boneRotations[upperArmKey].rotateBasis(\n                upperArmParentQuaternion);\n\n            [theta, phi] = calcSphericalCoord(upperArmDir, upperArmBasis);\n            this._boneRotations[upperArmKey].set(reverseRotation(sphericalToQuaternion(\n                upperArmBasis, theta, phi, upperArmParentQuaternion), AXIS.yz));\n\n            // Rotate lower arms around X axis together with hands.\n            // This is a combination of spherical coordinates rotation and rotation between bases.\n            const handNormal = isLeft ? this.leftHandNormal : this.rightHandNormal;\n            const lowerArmKey = `${k}LowerArm`;\n            const lowerArmDir = wristLandmark.subtract(elbowLandmark).normalize();\n            const lowerArmPrevQuaternion = this.applyQuaternionChain(lowerArmKey, false);\n            const lowerArmBasis = this._boneRotations[lowerArmKey].rotateBasis(\n                lowerArmPrevQuaternion);\n            [theta, phi] = calcSphericalCoord(lowerArmDir, lowerArmBasis);\n\n            const handNormalsKey = `${k}HandNormals`;\n            const handNormals = this[handNormalsKey as PosesKey] as NormalizedLandmarkList;\n            handNormals.length = 0;\n\n            const firstQuaternion = reverseRotation(sphericalToQuaternion(\n                lowerArmBasis, theta, phi, lowerArmPrevQuaternion), AXIS.yz);\n            const finalQuaternion = this.applyXRotationWithChild(\n                lowerArmKey, lowerArmPrevQuaternion, firstQuaternion,\n                handNormal, lowerArmBasis);\n\n            this._boneRotations[lowerArmKey].set(finalQuaternion);\n        }\n        // Update rotations on wrists\n        this.calcWristBones(false);\n\n        // Legs and feet\n        for (const k of LR) {\n            const isLeft = k === \"left\";\n            if (!this.shallUpdateLegs(isLeft)) continue;\n\n            const thisLandmarks = isLeft ? POSE_LANDMARKS_LEFT : POSE_LANDMARKS_RIGHT;\n            const upperLegKey = `${k}UpperLeg`;\n            const lowerLegKey = `${k}LowerLeg`;\n            const hipLandmark = this.worldPoseLandmarks[thisLandmarks[`${k.toUpperCase()}_HIP` as keyof typeof thisLandmarks]].pos;\n            const kneeLandmark = this.worldPoseLandmarks[thisLandmarks[`${k.toUpperCase()}_KNEE` as keyof typeof thisLandmarks]].pos;\n            const ankleLandmark = this.worldPoseLandmarks[thisLandmarks[`${k.toUpperCase()}_ANKLE` as keyof typeof thisLandmarks]].pos;\n\n            const upperLegDir = kneeLandmark.subtract(hipLandmark).normalize();\n            const upperLegParentQuaternion = this.applyQuaternionChain(upperLegKey, false);\n            const upperLegBasis = this._boneRotations[upperLegKey].rotateBasis(\n                upperLegParentQuaternion);\n            [theta, phi] = calcSphericalCoord(upperLegDir, upperLegBasis);\n            this._boneRotations[upperLegKey].set(reverseRotation(sphericalToQuaternion(\n                upperLegBasis, theta, phi, upperLegParentQuaternion), AXIS.yz));\n\n            const lowerLegDir = ankleLandmark.subtract(kneeLandmark).normalize();\n            const lowerLegPrevQuaternion = this.applyQuaternionChain(lowerLegKey, false);\n            const lowerLegBasis = this._boneRotations[lowerLegKey].rotateBasis(\n                lowerLegPrevQuaternion);\n            [theta, phi] = calcSphericalCoord(lowerLegDir, lowerLegBasis);\n            const firstQuaternion = reverseRotation(sphericalToQuaternion(\n                lowerLegBasis, theta, phi, lowerLegPrevQuaternion), AXIS.yz);\n            this._boneRotations[lowerLegKey].set(firstQuaternion);\n        }\n\n        this.calcFeetBones(false);\n    }\n\n    /**\n     * thisKey: key in _boneRotations\n     * prevQuaternion: Parent cumulated rotation quaternion\n     * firstQuaternion: Rotation quaternion calculated without applying X rotation\n     * normal: A normal pointing to local -y\n     * thisBasis: basis on this node after prevQuaternion is applied\n     */\n    private applyXRotationWithChild(\n        thisKey: string,\n        prevQuaternion: Quaternion,\n        firstQuaternion: Quaternion,\n        normal: Vector3,\n        thisBasis: Basis\n    ) {\n        const thisRotatedBasis = this._boneRotations[thisKey].rotateBasis(\n            prevQuaternion.multiply(reverseRotation(firstQuaternion, AXIS.yz)));\n\n        const thisYZPlane = Plane.FromPositionAndNormal(Vector3.Zero(), thisRotatedBasis.x.clone());\n        const projectedNormal = Vector3.Zero();\n        projectVectorOnPlane(thisYZPlane, normal).rotateByQuaternionToRef(\n            Quaternion.Inverse(Quaternion.RotationQuaternionFromAxis(\n                thisRotatedBasis.x.clone(), thisRotatedBasis.y.clone(), thisRotatedBasis.z.clone()\n            )), projectedNormal);\n        const projectedPrevZ = Vector3.Zero();\n        projectVectorOnPlane(thisYZPlane, thisRotatedBasis.z.negate()).rotateByQuaternionToRef(\n            Quaternion.Inverse(Quaternion.RotationQuaternionFromAxis(\n                thisRotatedBasis.x.clone(), thisRotatedBasis.y.clone(), thisRotatedBasis.z.clone()\n            )), projectedPrevZ);\n        projectedPrevZ.normalize();\n        let xPrev = Math.atan2(projectedPrevZ.y, -projectedPrevZ.z);\n        let xAngle = Math.atan2(projectedNormal.y, -projectedNormal.z);\n        if (xAngle > 0) xAngle -= Math.PI * 2;\n        if (xAngle < - Math.PI * 1.25) xAngle = xPrev;\n        // if (isLeg) {\n        //     if (Math.abs(xAngle) > Math.PI * 0.2778 && Math.abs(xAngle) < Math.PI / 2) {\n        //         xAngle -= Math.PI * 0.2778;\n        //     } else {\n        //         xAngle = xPrev;\n        //     }\n        // }\n\n        const thisXRotatedBasis = thisRotatedBasis.rotateByQuaternion(\n            Quaternion.RotationAxis(thisRotatedBasis.x.clone(), (xAngle - xPrev) * 0.5));\n        // The quaternion needs to be calculated in local coordinate system\n        const secondQuaternion = quaternionBetweenBases(\n            thisBasis, thisXRotatedBasis, prevQuaternion\n        );\n\n        const finalQuaternion = reverseRotation(secondQuaternion, AXIS.yz);\n        return finalQuaternion;\n    }\n\n    private calcWristBones(firstPass = true) {\n        const hands = {\n            left: this.leftHandLandmarks,\n            right: this.rightHandLandmarks,\n        }\n\n        for (const [k, v] of Object.entries(hands)) {\n            const isLeft = k === 'left';\n            const wristVisilibity = this.cloneableInputResults?.poseLandmarks[\n                isLeft ? POSE_LANDMARKS.LEFT_WRIST : POSE_LANDMARKS.RIGHT_WRIST].visibility || 0;\n            if (wristVisilibity <= VISIBILITY_THRESHOLD) continue;\n\n            const vertices: FilteredLandmarkVector3[] = [\n                [v[HAND_LANDMARKS.WRIST], v[HAND_LANDMARKS.PINKY_MCP], v[HAND_LANDMARKS.INDEX_FINGER_MCP]],\n                [v[HAND_LANDMARKS.WRIST], v[HAND_LANDMARKS.RING_FINGER_MCP], v[HAND_LANDMARKS.INDEX_FINGER_MCP]],\n                [v[HAND_LANDMARKS.WRIST], v[HAND_LANDMARKS.PINKY_MCP], v[HAND_LANDMARKS.MIDDLE_FINGER_MCP]],\n            ]\n\n            // Root normal\n            const handNormal = isLeft ? this.leftHandNormal : this.rightHandNormal;\n            const rootNormal = vertices.reduce((prev, curr) => {\n                const _normal = Poses.normalFromVertices(curr, isLeft);\n                // handNormals.push(vectorToNormalizedLandmark(_normal));\n                return prev.add(_normal);\n            }, Vector3.Zero()).normalize();\n            handNormal.copyFrom(rootNormal);\n            // handNormals.push(vectorToNormalizedLandmark(rootNormal));\n\n            const thisWristRotation = this._boneRotations[handLandMarkToBoneName(HAND_LANDMARKS.WRIST, isLeft)];\n            const basis1: Basis = thisWristRotation.baseBasis;\n\n            // Project palm landmarks to average plane\n            const projectedLandmarks = calcAvgPlane([\n                v[HAND_LANDMARKS.WRIST].pos,\n                v[HAND_LANDMARKS.INDEX_FINGER_MCP].pos,\n                v[HAND_LANDMARKS.MIDDLE_FINGER_MCP].pos,\n                v[HAND_LANDMARKS.RING_FINGER_MCP].pos,\n                v[HAND_LANDMARKS.PINKY_MCP].pos\n            ], rootNormal);\n            const basis2 = getBasis([\n                projectedLandmarks[0],\n                projectedLandmarks[1],\n                projectedLandmarks[4]\n            ]).rotateByQuaternion(this.applyQuaternionChain(HAND_LANDMARKS.WRIST, isLeft).conjugate());\n            const wristRotationQuaternionRaw = quaternionBetweenBases(basis1, basis2);\n\n            const wristRotationQuaternion = reverseRotation(wristRotationQuaternionRaw, AXIS.yz);\n            if (!firstPass)\n                thisWristRotation.set(wristRotationQuaternion);\n        }\n    }\n\n    private calcHandBones() {\n        // Right hand shall have local x reversed?\n        const hands = {\n            left: this.leftHandLandmarks,\n            right: this.rightHandLandmarks,\n        }\n\n        for (const [k, v] of Object.entries(hands)) {\n            const isLeft = k === 'left';\n\n            for (let i = 1; i < HAND_LANDMARK_LENGTH; ++i) {\n                if (i % 4 === 0) continue;\n\n                const thisHandRotation = this._boneRotations[handLandMarkToBoneName(i, isLeft)];\n                const thisLandmark = v[i].pos.clone();\n                const nextLandmark = v[i + 1].pos.clone();\n                let thisDir = nextLandmark.subtract(thisLandmark).normalize();\n\n                const prevQuaternion = this.applyQuaternionChain(i, isLeft);\n                const thisBasis = thisHandRotation.rotateBasis(prevQuaternion);\n\n                // Project landmark to XZ plane for second and third segments\n                if (i % 4 === 2 || i % 4 === 3) {\n                    const projPlane = Plane.FromPositionAndNormal(\n                        Vector3.Zero(), thisBasis.y.clone());\n                    thisDir = projectVectorOnPlane(projPlane, thisDir);\n                }\n                let [theta, phi] = calcSphericalCoord(thisDir, thisBasis);\n\n                // Need to use original Basis, because the quaternion from\n                // RotationAxis inherently uses local coordinate system.\n                let thisRotationQuaternion;\n                const lrCoeff = isLeft ? -1 : 1;\n                // Thumb rotations are y main. Others are z main.\n                const removeAxis = i % 4 === 1 ?\n                    i < 4 ? AXIS.none : AXIS.x\n                    :\n                    i < 4 ? AXIS.xz : AXIS.xy;\n                const firstCapAxis = i < 4 ? AXIS.z : AXIS.y;\n                const secondCapAxis = i < 4 ? AXIS.y : AXIS.z;\n                const secondCap = i < 2 ? 15 : 110;\n                thisRotationQuaternion =\n                    removeRotationAxisWithCap(\n                        sphericalToQuaternion(thisBasis, theta, phi, prevQuaternion),\n                        removeAxis,\n                        firstCapAxis, -15, 15,\n                        secondCapAxis, lrCoeff * -15, lrCoeff * secondCap);\n                thisRotationQuaternion = reverseRotation(thisRotationQuaternion, AXIS.yz);\n                thisHandRotation.set(thisRotationQuaternion);\n            }\n        }\n    }\n\n    private calcFeetBones(firstPass = true) {\n        for (const k of LR) {\n            const isLeft = k === 'left';\n            if (!this.shallUpdateLegs(isLeft)) continue;\n\n            const landmarkBasis = isLeft ?\n                getBasis([\n                    this.worldPoseLandmarks[POSE_LANDMARKS_LEFT.LEFT_HEEL].pos,\n                    this.worldPoseLandmarks[POSE_LANDMARKS_LEFT.LEFT_FOOT_INDEX].pos,\n                    this.worldPoseLandmarks[POSE_LANDMARKS_LEFT.LEFT_ANKLE].pos\n                ]) : getBasis([\n                    this.worldPoseLandmarks[POSE_LANDMARKS_RIGHT.RIGHT_HEEL].pos,\n                    this.worldPoseLandmarks[POSE_LANDMARKS_RIGHT.RIGHT_FOOT_INDEX].pos,\n                    this.worldPoseLandmarks[POSE_LANDMARKS_RIGHT.RIGHT_ANKLE].pos\n                ]);\n\n            const footBoneKey = `${k}Foot`;\n            const thisBasis = landmarkBasis.negateAxes(AXIS.yz).transpose([1, 2, 0]);\n            thisBasis.verifyBasis();\n\n            // Root normal\n            const footNormal = isLeft ? this.leftFootNormal : this.rightFootNormal;\n            footNormal.copyFrom(thisBasis.z.negate());\n\n            const thisFootRotation = this._boneRotations[footBoneKey];\n            const basis1: Basis = thisFootRotation.baseBasis;\n            const basis2 = thisBasis.rotateByQuaternion(this.applyQuaternionChain(footBoneKey, isLeft).conjugate());\n            const footRotationQuaternionRaw = quaternionBetweenBases(basis1, basis2);\n\n            const footRotationQuaternion = reverseRotation(footRotationQuaternionRaw, AXIS.yz);\n            if (!firstPass)\n                thisFootRotation.set(footRotationQuaternion);\n        }\n    }\n\n    private preProcessResults() {\n        // Preprocessing results\n        // Create pose landmark list\n        // @ts-ignore\n        const inputWorldPoseLandmarks: NormalizedLandmarkList | undefined = this.cloneableInputResults?.ea;    // Seems to be the new pose_world_landmark\n        const inputPoseLandmarks: NormalizedLandmarkList | undefined = this.cloneableInputResults?.poseLandmarks;    // Seems to be the new pose_world_landmark\n        if (inputWorldPoseLandmarks && inputPoseLandmarks) {\n            if (inputWorldPoseLandmarks.length !== POSE_LANDMARK_LENGTH)\n                console.warn(`Pose Landmark list has a length less than ${POSE_LANDMARK_LENGTH}!`);\n\n            this.inputPoseLandmarks = this.preProcessLandmarks(\n                inputWorldPoseLandmarks, this.worldPoseLandmarks);\n            this.preProcessLandmarks(\n                inputPoseLandmarks, this.poseLandmarks);\n\n            // Positional offset\n            if ((inputWorldPoseLandmarks[POSE_LANDMARKS.LEFT_HIP].visibility || 0) > VISIBILITY_THRESHOLD &&\n                (inputWorldPoseLandmarks[POSE_LANDMARKS.RIGHT_HIP].visibility || 0) > VISIBILITY_THRESHOLD\n            ) {\n                const midHipPos = vectorToNormalizedLandmark(\n                    this.poseLandmarks[POSE_LANDMARKS.LEFT_HIP].pos\n                        .add(this.poseLandmarks[POSE_LANDMARKS.RIGHT_HIP].pos)\n                        .scaleInPlace(0.5)\n                );\n                midHipPos.z = 0;    // No depth info\n                if (!this.midHipInitOffset) {\n                    this.midHipInitOffset = midHipPos;\n                    Object.freeze(this.midHipInitOffset);\n                }\n                this.midHipOffset.updatePosition(new Vector3(\n                    midHipPos.x - this.midHipInitOffset.x,\n                    midHipPos.y - this.midHipInitOffset.y,\n                    midHipPos.z - this.midHipInitOffset.z,\n                ))\n                // TODO: delta_x instead of x\n                this.midHipPos = vectorToNormalizedLandmark(this.midHipOffset.pos);\n            }\n        }\n\n        const inputFaceLandmarks = this.cloneableInputResults?.faceLandmarks;    // Seems to be the new pose_world_landmark\n        if (inputFaceLandmarks) {\n            this.inputFaceLandmarks = this.preProcessLandmarks(\n                inputFaceLandmarks, this.faceLandmarks);\n        }\n\n        // TODO: update wrist offset only when debugging\n        const inputLeftHandLandmarks = this.cloneableInputResults?.leftHandLandmarks;\n        const inputRightHandLandmarks = this.cloneableInputResults?.rightHandLandmarks;\n        if (inputLeftHandLandmarks) {\n            this.leftWristOffset.updatePosition(\n                this.worldPoseLandmarks[POSE_LANDMARKS.LEFT_WRIST].pos.subtract(\n                    normalizedLandmarkToVector(\n                        inputLeftHandLandmarks[HAND_LANDMARKS.WRIST],\n                        Poses.HAND_POSITION_SCALING,\n                        true)\n                )\n            );\n            this.inputLeftHandLandmarks = this.preProcessLandmarks(\n                inputLeftHandLandmarks, this.leftHandLandmarks,\n                this.leftWristOffset.pos, Poses.HAND_POSITION_SCALING);\n        }\n        if (inputRightHandLandmarks) {\n            this.rightWristOffset.updatePosition(\n                this.worldPoseLandmarks[POSE_LANDMARKS.RIGHT_WRIST].pos.subtract(\n                    normalizedLandmarkToVector(\n                        inputRightHandLandmarks[HAND_LANDMARKS.WRIST],\n                        Poses.HAND_POSITION_SCALING,\n                        true)\n                )\n            );\n            this.inputRightHandLandmarks = this.preProcessLandmarks(\n                inputRightHandLandmarks, this.rightHandLandmarks,\n                this.rightWristOffset.pos, Poses.HAND_POSITION_SCALING);\n        }\n    }\n\n    private preProcessLandmarks(\n        resultsLandmarks: NormalizedLandmark[],\n        filteredLandmarks: FilteredLandmarkVectorList,\n        offset = Vector3.Zero(),\n        scaling = 1.\n    ) {\n        // Reverse Y-axis. Input results use canvas coordinate system.\n        resultsLandmarks.map((v) => {\n            v.x = v.x * scaling + offset.x;\n            v.y = -v.y * scaling + offset.y;\n            v.z = v.z * scaling + offset.z;\n        });\n        // Noise filtering\n        for (let i = 0; i < resultsLandmarks.length; ++i) {\n            filteredLandmarks[i].updatePosition(\n                normalizedLandmarkToVector(resultsLandmarks[i]),\n                resultsLandmarks[i].visibility);\n        }\n        return resultsLandmarks;\n    }\n\n    private toCloneableLandmarks(\n        landmarks: FilteredLandmarkVectorList,\n        cloneableLandmarks: NormalizedLandmarkList\n    ) {\n        cloneableLandmarks.forEach((v, idx) => {\n            v.x = landmarks[idx].pos.x;\n            v.y = landmarks[idx].pos.y;\n            v.z = landmarks[idx].pos.z;\n            v.visibility = landmarks[idx].visibility;\n        })\n    }\n\n    private filterFaceLandmarks() {\n        // Unpack face mesh landmarks\n        this._faceMeshLandmarkIndexList.length = 0;\n        this._faceMeshLandmarkList.length = 0;\n        for (let i = 0; i < Poses.FACE_MESH_CONNECTIONS.length; ++i) {\n            const arr = [];\n            const idx = new Set<number>();\n            Poses.FACE_MESH_CONNECTIONS[i].forEach((v) => {\n                idx.add(v[0]);\n                idx.add(v[1]);\n            });\n            const idxArr = Array.from(idx);\n            this._faceMeshLandmarkIndexList.push(idxArr);\n            for (let j = 0; j < idxArr.length; j++) {\n                arr.push({\n                    x: this.faceLandmarks[idxArr[j]].pos.x,\n                    y: this.faceLandmarks[idxArr[j]].pos.y,\n                    z: this.faceLandmarks[idxArr[j]].pos.x,\n                    visibility: this.faceLandmarks[idxArr[j]].visibility,\n                });\n            }\n            this._faceMeshLandmarkList.push(arr);\n        }\n    }\n\n    private lRLinkWeights() {\n        const faceCameraAngle = degreeBetweenVectors(\n            normalizedLandmarkToVector(this.faceNormal),\n            new Vector3(0, 0, -1),\n            true);\n        const weightLeft = remapRangeWithCap(\n            faceCameraAngle.y,\n            Poses.LR_FACE_DIRECTION_RANGE,\n            -Poses.LR_FACE_DIRECTION_RANGE,\n            0, 1\n        );\n        const weightRight = remapRangeWithCap(\n            faceCameraAngle.y,\n            -Poses.LR_FACE_DIRECTION_RANGE,\n            Poses.LR_FACE_DIRECTION_RANGE,\n            0, 1\n        );\n        return {weightLeft, weightRight};\n    }\n\n    private lRLink(l: number, r: number) {\n        const {weightLeft, weightRight} = this.lRLinkWeights();\n        return weightLeft * l + weightRight * r;\n    }\n\n    private lRLinkVector(l: Vector3, r: Vector3) {\n        const {weightLeft, weightRight} = this.lRLinkWeights();\n        return l.scale(weightLeft).addInPlace(r.scale(weightRight));\n    }\n\n    private lRLinkQuaternion(l: Quaternion, r: Quaternion) {\n        const {weightLeft, weightRight} = this.lRLinkWeights();\n        return l.scale(weightLeft).addInPlace(r.scale(weightRight));\n    }\n\n    private initHandBoneRotations(isLeft: boolean) {\n        // TODO: adjust bases\n        // Wrist's basis is used for calculating quaternion between two Cartesian coordinate systems directly\n        // All others' are used for rotating planes of a Spherical coordinate system at the node\n        this._initBoneRotations[handLandMarkToBoneName(HAND_LANDMARKS.WRIST, isLeft)] =\n            new CloneableQuaternion(\n                Quaternion.Identity(), isLeft ? getBasis(\n                    [\n                        new Vector3(0, 0, 0),\n                        new Vector3(isLeft ? 1 : -1, 0, 0),\n                        new Vector3(isLeft ? 1 : -1, 0, 1)\n                    ]) : new Basis([\n                    new Vector3(-0.9327159079568041, 0.12282522615654383, -0.3390501421086685).normalize(),\n                    new Vector3(-0.010002212677077182, 0.0024727643453822945, 0.028411551927747327).normalize(),\n                    new Vector3(0.14320801411112857, 0.9890497926949048, -0.03566472016590984).normalize()\n                ]));\n        // Thumb\n        // THUMB_CMC\n        // THUMB_MCP\n        // THUMB_IP\n        for (let i = 1; i < 4; ++i) {\n            const tMCP_X = new Vector3(isLeft ? 1 : -1, 0, -1.5).normalize();\n            const tMCP_Y = new Vector3(0, isLeft ? -1 : 1, 0);\n            const tMCP_Z = Vector3.Cross(tMCP_X, tMCP_Y).normalize();\n            const basis = new Basis([\n                tMCP_X,\n                // new Vector3(0, 0, isLeft ? -1 : 1),\n                tMCP_Y,\n                tMCP_Z,\n            ]).rotateByQuaternion(Quaternion.FromEulerAngles(0, 0, isLeft ? 0.2 : -0.2));\n            this._initBoneRotations[handLandMarkToBoneName(i, isLeft)] =\n                new CloneableQuaternion(\n                    Quaternion.Identity(), basis);\n        }\n        // Index\n        for (let i = 5; i < 8; ++i) {\n            this._initBoneRotations[handLandMarkToBoneName(i, isLeft)] =\n                new CloneableQuaternion(\n                    Quaternion.Identity(), new Basis([\n                        new Vector3(isLeft ? 1 : -1, 0, 0),\n                        new Vector3(0, 0, isLeft ? -1 : 1),\n                        new Vector3(0, 1, 0),\n                    ]));\n        }\n        // Middle\n        for (let i = 9; i < 12; ++i) {\n            this._initBoneRotations[handLandMarkToBoneName(i, isLeft)] =\n                new CloneableQuaternion(\n                    Quaternion.Identity(), new Basis([\n                        new Vector3(isLeft ? 1 : -1, 0, 0),\n                        new Vector3(0, 0, isLeft ? -1 : 1),\n                        new Vector3(0, 1, 0),\n                    ]));\n        }\n        // Ring\n        for (let i = 13; i < 16; ++i) {\n            this._initBoneRotations[handLandMarkToBoneName(i, isLeft)] =\n                new CloneableQuaternion(\n                    Quaternion.Identity(), new Basis([\n                        new Vector3(isLeft ? 1 : -1, 0, 0),\n                        new Vector3(0, 0, isLeft ? -1 : 1),\n                        new Vector3(0, 1, 0),\n                    ]));\n        }\n        // Pinky\n        for (let i = 17; i < 20; ++i) {\n            this._initBoneRotations[handLandMarkToBoneName(i, isLeft)] =\n                new CloneableQuaternion(\n                    Quaternion.Identity(), new Basis([\n                        new Vector3(isLeft ? 1 : -1, 0, 0),\n                        new Vector3(0, 0, isLeft ? -1 : 1),\n                        new Vector3(0, 1, 0),\n                    ]));\n        }\n    }\n\n    private initBoneRotations() {\n        // Hand bones\n        this.initHandBoneRotations(true);\n        this.initHandBoneRotations(false);\n\n        // Pose bones\n        this._initBoneRotations['head'] = new CloneableQuaternion(\n            Quaternion.Identity(), new Basis(null)\n        );\n        this._initBoneRotations['neck'] = new CloneableQuaternion(\n            Quaternion.Identity(), new Basis(null)\n        );\n        this._initBoneRotations['hips'] = new CloneableQuaternion(\n            Quaternion.Identity(), new Basis([\n                new Vector3(0, 0, -1),\n                new Vector3(-1, 0, 0),\n                new Vector3(0, 1, 0),\n            ])\n        );\n        this._initBoneRotations['spine'] = new CloneableQuaternion(\n            Quaternion.Identity(), new Basis(\n                [new Vector3(0, 0, -1),\n                    new Vector3(-1, 0, 0),\n                    new Vector3(0, 1, 0),\n                ]\n            )\n        );\n\n        const lr = [\"left\", \"right\"];\n        // Arms\n        for (const k of lr) {\n            const isLeft = k === \"left\";\n            this._initBoneRotations[`${k}UpperArm`] = new CloneableQuaternion(\n                Quaternion.FromEulerAngles(0, 0, isLeft ? 1.0472 : -1.0472),\n                new Basis([\n                    new Vector3(isLeft ? 1 : -1, 0, 0),\n                    new Vector3(0, 0, isLeft ? -1 : 1),\n                    new Vector3(0, 1, 0),\n                ]));\n            this._initBoneRotations[`${k}LowerArm`] = new CloneableQuaternion(\n                Quaternion.Identity(), new Basis([\n                    new Vector3(isLeft ? 1 : -1, 0, 0),\n                    new Vector3(0, 0, isLeft ? -1 : 1),\n                    new Vector3(0, 1, 0),\n                ]));\n        }\n        // Legs\n        for (const k of lr) {\n            const isLeft = k === \"left\";\n            this._initBoneRotations[`${k}UpperLeg`] = new CloneableQuaternion(\n                Quaternion.Identity(), new Basis([\n                    new Vector3(0, -1, 0),\n                    new Vector3(-1, 0, 0),\n                    new Vector3(0, 0, -1),\n                ]).rotateByQuaternion(Quaternion.FromEulerAngles(\n                    0, 0, isLeft ? -0.05236 : 0.05236)));\n            this._initBoneRotations[`${k}LowerLeg`] = new CloneableQuaternion(\n                Quaternion.Identity(), new Basis([\n                    new Vector3(0, -1, 0),\n                    new Vector3(-1, 0, 0),\n                    new Vector3(0, 0, -1),\n                ]).rotateByQuaternion(Quaternion.FromEulerAngles(\n                    0, 0, isLeft ? -0.0873 : 0.0873)));\n        }\n        // Feet\n        for (const k of lr) {\n            const isLeft = k === \"left\";\n            const startBasis = new Basis([\n                new Vector3(0, -1, 0),\n                new Vector3(-1, 0, 0),\n                new Vector3(0, 0, -1),\n            ]);\n            // const rX = Quaternion.RotationAxis(startBasis.x.clone(), isLeft ? 0.2618 : -0.2618);\n            // const z1 = Vector3.Zero();\n            // startBasis.z.rotateByQuaternionToRef(rX, z1);\n            // const rZ = Quaternion.RotationAxis(z1, isLeft ? 0.0873 : -0.0873);\n            // const thisFootBasisRotation = isLeft ? this.leftFootBasisRotation : this.rightFootBasisRotation;\n            // thisFootBasisRotation.copyFrom(rX.multiply(rZ));\n\n            this._initBoneRotations[`${k}Foot`] = new CloneableQuaternion(\n                Quaternion.Identity(), startBasis);\n        }\n\n        // Expressions\n        this._initBoneRotations['mouth'] = new CloneableQuaternion(\n            Quaternion.Identity(), new Basis(null));\n        this._initBoneRotations['blink'] = new CloneableQuaternion(\n            Quaternion.Identity(), new Basis(null));\n        this._initBoneRotations['leftIris'] = new CloneableQuaternion(\n            Quaternion.Identity(), new Basis(null));\n        this._initBoneRotations['rightIris'] = new CloneableQuaternion(\n            Quaternion.Identity(), new Basis(null));\n        this._initBoneRotations['iris'] = new CloneableQuaternion(\n            Quaternion.Identity(), new Basis(null));\n\n        // Freeze init object\n        Object.freeze(this._initBoneRotations);\n\n        // Deep copy to actual map\n        for (const [k, v] of Object.entries(this._initBoneRotations)) {\n            this._boneRotations[k] = new CloneableQuaternion(\n                cloneableQuaternionToQuaternion(v), v.baseBasis);\n        }\n    }\n\n    private static normalFromVertices(vertices: FilteredLandmarkVector3, reverse: boolean): Vector3 {\n        if (reverse)\n            vertices.reverse();\n        const vec = [];\n        for (let i = 0; i < 2; ++i) {\n            vec.push(vertices[i + 1].pos.subtract(vertices[i].pos));\n        }\n        return vec[0].cross(vec[1]).normalize();\n    }\n\n    // Recursively apply previous quaternions to current basis\n    private applyQuaternionChain(startLandmark: number | string, isLeft: boolean): Quaternion {\n        const q = Quaternion.Identity();\n        const rotations: Quaternion[] = [];\n        let [startNode, parentMap]: [\n            TransformNodeTreeNode, Map<TransformNodeTreeNode, TransformNodeTreeNode>\n        ] = depthFirstSearch(this.bonesHierarchyTree, (n: TransformNodeTreeNode) => {\n            const targetName = Number.isFinite(startLandmark) ?\n                handLandMarkToBoneName(startLandmark as number, isLeft)\n                : startLandmark;\n            return (n.name === targetName);\n        });\n        while (parentMap.has(startNode)) {\n            startNode = parentMap.get(startNode)!;\n            const boneQuaternion = this._boneRotations[startNode.name];\n            rotations.push(reverseRotation(\n                cloneableQuaternionToQuaternion(boneQuaternion),\n                AXIS.yz));\n        }\n        // Quaternions need to be applied from parent to children\n        rotations.reverse().map((tq: Quaternion) => {\n            q.multiplyInPlace(tq);\n        });\n        q.normalize();\n\n        return q;\n    }\n\n    private shallUpdateArm(isLeft: boolean) {\n        // Update only when all leg landmarks are visible\n        const shoulderVisilibity = this.cloneableInputResults?.poseLandmarks[\n            isLeft ? POSE_LANDMARKS.LEFT_SHOULDER : POSE_LANDMARKS.RIGHT_SHOULDER].visibility || 0;\n        const wristVisilibity = this.cloneableInputResults?.poseLandmarks[\n            isLeft ? POSE_LANDMARKS.LEFT_WRIST : POSE_LANDMARKS.RIGHT_WRIST].visibility || 0;\n        return !(shoulderVisilibity <= VISIBILITY_THRESHOLD\n            || wristVisilibity <= VISIBILITY_THRESHOLD);\n\n    }\n\n    private shallUpdateLegs(isLeft: boolean) {\n        // Update only when all leg landmarks are visible\n        const kneeVisilibity = this.cloneableInputResults?.poseLandmarks[\n            isLeft ? POSE_LANDMARKS_LEFT.LEFT_KNEE : POSE_LANDMARKS_RIGHT.RIGHT_KNEE].visibility || 0;\n        const ankleVisilibity = this.cloneableInputResults?.poseLandmarks[\n            isLeft ? POSE_LANDMARKS_LEFT.LEFT_ANKLE : POSE_LANDMARKS_RIGHT.RIGHT_ANKLE].visibility || 0;\n        const footVisilibity = this.cloneableInputResults?.poseLandmarks[\n            isLeft ? POSE_LANDMARKS_LEFT.LEFT_FOOT_INDEX : POSE_LANDMARKS_RIGHT.RIGHT_FOOT_INDEX].visibility || 0;\n        const heelVisilibity = this.cloneableInputResults?.poseLandmarks[\n            isLeft ? POSE_LANDMARKS_LEFT.LEFT_HEEL : POSE_LANDMARKS_RIGHT.RIGHT_HEEL].visibility || 0;\n        return !(kneeVisilibity <= VISIBILITY_THRESHOLD || ankleVisilibity <= VISIBILITY_THRESHOLD\n            || footVisilibity <= VISIBILITY_THRESHOLD || heelVisilibity <= VISIBILITY_THRESHOLD);\n\n    }\n\n    private pushBoneRotationBuffer() {\n        if (!this._boneRotationUpdateFn) return;\n\n        // Callback\n        const jsonStr = JSON.stringify(this._boneRotations);\n        const arrayBuffer = this.textEncoder.encode(jsonStr);\n        this._boneRotationUpdateFn(Comlink.transfer(arrayBuffer, [arrayBuffer.buffer]));\n    }\n}\n\nexport const poseWrapper = {\n    poses: Poses\n};\n\nComlink.expose(poseWrapper);\n\nexport default Poses;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [637], function() { return __webpack_require__(34817); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"cc9e6140\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t817: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkv3d_demo\"] = self[\"webpackChunkv3d_demo\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(637).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["Basis","v33","leftHanded","eps","_data","getOriginalCoordVectors","every","v","this","set","forEach","Object","freeze","x","copyFrom","y","z","verifyBasis","negate","cross","Error","q","newBasisVectors","Vector3","map","i","rotateByQuaternionToRef","axis","clone","negateInPlace","order","Set","console","error","data","ORIGINAL_CARTESIAN_BASIS_VECTORS","quaternionBetweenBases","basis1","basis2","prevQuaternion","thisBasis1","thisBasis2","undefined","extraQuaternionR","Quaternion","rotateByQuaternion","rotationBasis1","rotationBasis2","quaternion31","normalize","quaternion31R","multiply","getBasis","obj","a","b","c","planeXY","Plane","axisX","subtract","axisZ","normal","cp","add","scale","axisY","calcAvgPlane","pts","length","avgPt","reduce","prev","curr","VISIBILITY_THRESHOLD","gaussianKernel1d","sqr2pi","Math","sqrt","PI","size","sigma","width","kernel","Array","norm","coefficient","total","exp","OneEuroVectorFilter","t_prev","x_prev","dx_prev","min_cutoff","beta","d_cutoff","t","t_e","a_d","smoothing_factor","dx","scaleInPlace","dx_hat","exponential_smoothing","cutoff","x_hat","r","addInPlace","KalmanVectorFilter","R","Q","kalmanFilterX","kalmanFilterY","kalmanFilterZ","vec","newValues","filter","GaussianVectorFilter","_values","RangeError","floor","values","push","shift","warn","slice","ret","len0","len1","FilteredLandmarkVector","params","oneEuroCutoff","oneEuroBeta","type","gaussianVectorFilter","_t","_pos","visibility","mainFilter","pos","gaussianSigma","value","next","apply","POSE_LANDMARK_LENGTH","FACE_LANDMARK_LENGTH","HAND_LANDMARK_LENGTH","normalizedLandmarkToVector","l","scaling","reverseY","vectorToNormalizedLandmark","HAND_LANDMARKS","WRIST","THUMB_CMC","THUMB_MCP","THUMB_IP","THUMB_TIP","INDEX_FINGER_MCP","INDEX_FINGER_PIP","INDEX_FINGER_DIP","INDEX_FINGER_TIP","MIDDLE_FINGER_MCP","MIDDLE_FINGER_PIP","MIDDLE_FINGER_DIP","MIDDLE_FINGER_TIP","RING_FINGER_MCP","RING_FINGER_PIP","RING_FINGER_DIP","RING_FINGER_TIP","PINKY_MCP","PINKY_PIP","PINKY_DIP","PINKY_TIP","HAND_LANDMARKS_BONE_MAPPING","Hand","ThumbProximal","ThumbIntermediate","ThumbDistal","IndexProximal","IndexIntermediate","IndexDistal","MiddleProximal","MiddleIntermediate","MiddleDistal","RingProximal","RingIntermediate","RingDistal","LittleProximal","LittleIntermediate","LittleDistal","HAND_LANDMARKS_BONE_REVERSE_MAPPING","handLandMarkToBoneName","landmark","isLeft","depthFirstSearch","rootNode","f","stack","parentMap","Map","currentNode","splice","currentChildren","children","index","child","has","AXIS","CloneableQuaternion","basis","_baseBasis","w","cloneableQuaternionToQuaternion","FilteredQuaternion","_rot","rot","angles","toEulerAngles","RadToDeg","Angle","degrees","DegToRad","d","radians","quaternionBetweenVectors","v1","v2","angle","degreeBetweenVectors","remapDegree","quaternionToDegrees","remapDegreeWithCap","deg","remapFn","vectorsSameDirWithinEps","reverseRotation","none","xy","yz","xz","xyz","removeRotationAxisWithCap","capAxis1","capLow1","capHigh1","capAxis2","capLow2","capHigh2","calcSphericalCoord","qToOriginal","posInOriginal","acos","atan2","sphericalToQuaternion","theta","phi","xTz","xTzBasis","q1","q1Basis","q2","q2Basis","planeXZ","intermBasis","newBasisZ","newBasisY","newBasis","scaleRotation","quaternion","initArray","initializer","arr","objectFlip","keys","key","rangeCap","min","max","tmp","remapRangeWithCap","src_low","src_high","dst_low","dst_high","remapRangeNoCap","validVector3","Number","isFinite","setEqual","as","bs","projectVectorOnPlane","projPlane","fixedLengthQueue","concat","LR","pointLineDistance","point","lineEndA","lineEndB","lineDir","pProj","PoseKeyPoints","top_face_oval","left_face_oval","bottom_face_oval","right_face_oval","left_eye_top","left_eye_bottom","left_eye_inner","left_eye_outer","left_eye_inner_secondary","left_eye_outer_secondary","left_iris_top","left_iris_bottom","left_iris_left","left_iris_right","right_eye_top","right_eye_bottom","right_eye_inner","right_eye_outer","right_eye_inner_secondary","right_eye_outer_secondary","right_iris_top","right_iris_bottom","right_iris_left","right_iris_right","mouth_top_first","mouth_top_second","mouth_top_third","mouth_bottom_first","mouth_bottom_second","mouth_bottom_third","mouth_left","mouth_right","Poses","boneOptions","boneRotationUpdateFn","_boneRotationUpdateFn","bonesHierarchyTree","cloneableInputResults","inputPoseLandmarks","poseLandmarks","worldPoseLandmarks","cloneablePoseLandmarks","inputFaceLandmarks","faceLandmarks","_faceMeshLandmarkIndexList","_faceMeshLandmarkList","leftWristOffset","inputLeftHandLandmarks","leftHandLandmarks","cloneableLeftHandLandmarks","leftHandNormal","rightWristOffset","inputRightHandLandmarks","rightHandLandmarks","cloneableRightHandLandmarks","rightHandNormal","leftFootNormal","rightFootNormal","leftFootBasisRotation","rightFootBasisRotation","_keyPoints","_blinkBase","_leftBlinkArr","_rightBlinkArr","_faceNormal","_headQuaternion","_initBoneRotations","_boneRotations","textEncoder","TextEncoder","_leftHandNormals","_rightHandNormals","_poseNormals","midHipPos","midHipInitOffset","midHipOffset","initBoneRotations","_boneOptions","tree","forceReplace","n","name","results","resetInvisible","resetBoneRotations","preProcessResults","toCloneableLandmarks","filterFaceLandmarks","getKeyPoints","calcIrisNormal","calcFaceBones","calcExpressions","calcPoseBones","calcHandBones","irisLockX","lockBones","POSE_LANDMARKS","k","lockFinger","lockArm","lockLeg","filterBoneRotations","pushBoneRotationBuffer","sendResult","entries","boneNames","faceMeshLandmarkIndexList","thisBasis","headParentQuaternion","applyQuaternionChain","headBasis","rotateBasis","updateRotation","scaledQuaternion","leftIrisCenter","rightIrisCenter","leftEyeCenter","rightEyeCenter","leftEyeWidth","rightEyeWidth","leftIrisOffset","EYE_WIDTH_BASELINE","rightIrisOffset","leftIrisRotationYPR","IRIS_MP_X_RANGE","IRIS_BJS_X_RANGE","IRIS_MP_Y_RANGE","IRIS_BJS_Y_RANGE","rightIrisRotationYPR","lRLinkQuaternion","leftTopToMiddle","leftTopToBottom","rightTopToMiddle","rightTopToBottom","updatePosition","log","leftRangeOffset","p","BLINK_RATIO_LOW","leftBlink","BLINK_RATIO_HIGH","rightRangeOffset","rightBlink","blink","lRLink","mouthWidth","mouthRange1","MOUTH_WIDTH_BASELINE","MOUTH_MP_RANGE_LOW","MOUTH_MP_RANGE_HIGH","mouthRange2","mouthRange3","leftHip","rightHip","leftShoulder","rightShoulder","poseNormals","worldXZPlane","hipLine","hipLineProj","hipRotationAngle","shoulderNormR","shoulderNormal","spineParentQuaternion","spineBasis","newSpineBasisY","newSpineBasis","calcWristBones","shallUpdateArm","upperArmKey","shoulderLandmark","toUpperCase","elbowLandmark","wristLandmark","upperArmDir","upperArmParentQuaternion","upperArmBasis","handNormal","lowerArmKey","lowerArmDir","lowerArmPrevQuaternion","lowerArmBasis","firstQuaternion","finalQuaternion","applyXRotationWithChild","shallUpdateLegs","thisLandmarks","POSE_LANDMARKS_LEFT","POSE_LANDMARKS_RIGHT","upperLegKey","lowerLegKey","hipLandmark","kneeLandmark","ankleLandmark","upperLegDir","upperLegParentQuaternion","upperLegBasis","lowerLegDir","lowerLegPrevQuaternion","lowerLegBasis","calcFeetBones","thisKey","thisRotatedBasis","thisYZPlane","projectedNormal","projectedPrevZ","xPrev","xAngle","thisXRotatedBasis","secondQuaternion","firstPass","hands","left","right","vertices","rootNormal","_normal","normalFromVertices","thisWristRotation","baseBasis","projectedLandmarks","conjugate","wristRotationQuaternionRaw","wristRotationQuaternion","thisHandRotation","thisLandmark","thisDir","thisRotationQuaternion","lrCoeff","removeAxis","firstCapAxis","secondCapAxis","secondCap","landmarkBasis","footBoneKey","negateAxes","transpose","footNormal","thisFootRotation","footRotationQuaternionRaw","footRotationQuaternion","inputWorldPoseLandmarks","ea","preProcessLandmarks","HAND_POSITION_SCALING","resultsLandmarks","filteredLandmarks","offset","landmarks","cloneableLandmarks","idx","FACE_MESH_CONNECTIONS","idxArr","from","j","faceCameraAngle","faceNormal","weightLeft","LR_FACE_DIRECTION_RANGE","weightRight","lRLinkWeights","tMCP_X","tMCP_Y","tMCP_Z","initHandBoneRotations","lr","startBasis","startLandmark","rotations","targetName","startNode","get","boneQuaternion","reverse","tq","multiplyInPlace","shoulderVisilibity","wristVisilibity","kneeVisilibity","ankleVisilibity","footVisilibity","heelVisilibity","jsonStr","JSON","stringify","arrayBuffer","encode","buffer","FACEMESH_LEFT_EYEBROW","FACEMESH_RIGHT_EYEBROW","FACEMESH_LEFT_EYE","FACEMESH_RIGHT_EYE","FACEMESH_LEFT_IRIS","FACEMESH_RIGHT_IRIS","FACEMESH_LIPS","FACEMESH_FACE_OVAL","HAND_BASE_ROOT_NORMAL","poseWrapper","poses","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","__webpack_exports__","O","deferred","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","getter","__esModule","definition","o","defineProperty","enumerable","e","chunkId","Promise","all","promises","u","miniCssF","g","globalThis","Function","window","prop","prototype","hasOwnProperty","installedChunks","importScripts","chunkLoadingGlobal","self","parentChunkLoadingFunction","bind","moreModules","runtime","pop","then"],"sourceRoot":""}